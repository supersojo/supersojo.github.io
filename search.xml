<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>bpf入门系列-2</title>
    <url>/2020/04/11/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-2/</url>
    <content><![CDATA[<h2 id="头文件设置"><a href="#头文件设置" class="headerlink" title="头文件设置"></a>头文件设置</h2><p>要想能够成功编译bpf程序，需要正确的设置头文件，在linux内核版本3.7之后引入了uapi，下面是uapi的简单介绍。</p>
<p>首先介绍下<a href="https://stackoverflow.com/questions/18858190/whats-in-include-uapi-of-kernel-source-project" target="_blank" rel="noopener">uapi</a>。<br>uapi主要是以下两个目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kernel_dir&#x2F;include&#x2F;uapi</span><br><span class="line">kernel_dir&#x2F;arch&#x2F;$ARCH&#x2F;include&#x2F;uapi</span><br></pre></td></tr></table></figure>

<p>uapi的目的是让头文件更加清晰，只有上面的头文件是用户态可以使用的，其它的作为内核私有头文件使用。</p>
<p>在编译bpf程序时我们要用到内核头文件，而不仅仅上上面的uapi的头文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kernel_dir&#x2F;arch&#x2F;$ARCH&#x2F;include</span><br><span class="line">kernel_dir&#x2F;arch&#x2F;$ARCH&#x2F;include&#x2F;generated</span><br><span class="line">kernel_dir&#x2F;include</span><br></pre></td></tr></table></figure>
<p>关于<a href="https://blog.linote.cn/2020/03/27/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-1/" target="_blank" rel="noopener">这个例子</a>的编译，如果使用内核头文件会遇到问题，例子中带了include/types.h，这个头文件和内核头文件冲突，可行workaround方案是把自带include放到编译选项的最后。<br><strong>编译器在寻找头文件是总是按照编译选项中列出目录先后的顺序搜索</strong>。</p>
<p>另外看下uapi/linux/types.h文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ifndef _UAPI_LINUX_TYPES_H</span><br><span class="line">#define _UAPI_LINUX_TYPES_H</span><br><span class="line"></span><br><span class="line">#include &lt;asm&#x2F;types.h&gt;</span><br><span class="line"></span><br><span class="line">#ifndef __ASSEMBLY__</span><br><span class="line">#ifndef __KERNEL__</span><br><span class="line">#ifndef __EXPORTED_HEADERS__</span><br><span class="line">#warning &quot;Attempt to use kernel headers from user space, see http:&#x2F;&#x2F;kernelnewbies.org&#x2F;KernelHeaders&quot;</span><br><span class="line">#endif &#x2F;* __EXPORTED_HEADERS__ *&#x2F;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#include &lt;linux&#x2F;posix_types.h&gt;</span><br></pre></td></tr></table></figure>
<p>我们在使用时需要定义<strong>KERNEL</strong>宏。</p>
<p>一个可用的头文件包含选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linuxhdrs ?&#x3D; &#x2F;usr&#x2F;src&#x2F;linux-headers-&#96;uname -r&#96;</span><br><span class="line">LINUXINCLUDE &#x3D;  -I$(linuxhdrs)&#x2F;arch&#x2F;x86&#x2F;include \</span><br><span class="line">                -I$(linuxhdrs)&#x2F;arch&#x2F;x86&#x2F;include&#x2F;generated \</span><br><span class="line">                -I$(linuxhdrs)&#x2F;arch&#x2F;x86&#x2F;include&#x2F;uapi \</span><br><span class="line">                -I$(linuxhdrs)&#x2F;arch&#x2F;x86&#x2F;include&#x2F;generated&#x2F;uapi \</span><br><span class="line">                -I$(linuxhdrs)&#x2F;include&#x2F;generated&#x2F;uapi \</span><br><span class="line">                -I$(linuxhdrs)&#x2F;include \</span><br><span class="line">                -I$(linuxhdrs)&#x2F;include&#x2F;uapi \</span><br><span class="line">                -include $(linuxhdrs)&#x2F;include&#x2F;linux&#x2F;kconfig.h</span><br></pre></td></tr></table></figure>

<p>在头文件设置好后，还需要额外编译选项用于编译bpf程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CLANG ?&#x3D; clang</span><br><span class="line">INC_FLAGS &#x3D; -nostdinc -isystem $(shell $(CLANG) -print-file-name&#x3D;include)</span><br><span class="line">EXTRA_CFLAGS ?&#x3D; -O2 -g -Wall -emit-llvm</span><br><span class="line">LLC ?&#x3D; llc</span><br><span class="line">CLANG ?&#x3D; clang</span><br><span class="line">LLVM_OBJDUMP ?&#x3D; llvm-objdump</span><br><span class="line"></span><br><span class="line">$(KERNELOBJS):  %.o:%.c</span><br><span class="line">        $(CLANG) $(INC_FLAGS) \</span><br><span class="line">                -D__KERNEL__ -D__ASM_SYSREG_H \</span><br><span class="line">                $(DEBUG_FLAGS) \</span><br><span class="line">                -Wno-unused-value -Wno-pointer-sign \</span><br><span class="line">                -Wno-compare-distinct-pointer-types \</span><br><span class="line">                -Wno-gnu-variable-sized-type-not-at-end \</span><br><span class="line">                -Wno-address-of-packed-member -Wno-tautological-compare \</span><br><span class="line">                -Wno-unknown-warning-option \</span><br><span class="line">                $(LINUXINCLUDE) \</span><br><span class="line">                -I..&#x2F;include \</span><br><span class="line">                $(EXTRA_CFLAGS) -c $&lt; -o -| $(LLC) -march&#x3D;bpf -filetype&#x3D;obj -o $@</span><br></pre></td></tr></table></figure>

<h2 id="一个bpf程序框架"><a href="#一个bpf程序框架" class="headerlink" title="一个bpf程序框架"></a>一个bpf程序框架</h2><p>这里是我整理的一个bpf框架，地址是<a href="https://github.com/supersojo/bpf_skeleton" target="_blank" rel="noopener">bpf_skeleton</a></p>
<p>这里讲下遇到的问题。首先是内核部分，按照上面一节设置头文件后问题不大，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~&#x2F;bpftest&#x2F;bpf_skeleton# ls kern</span><br><span class="line">bitehist.c  bpf_endian.h  bpf_helpers.h  Makefile</span><br></pre></td></tr></table></figure>

<p>可能对为何需要bpf_helpers.h有疑问，bpf程序最终是编译成bpf字节码，由bpf虚拟机执行，这里把bpf函数设置为整数标识，最后由llvm生成对bpf内核函数的调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void *(*bpf_map_lookup_elem)(void *map, void *key) &#x3D;</span><br><span class="line">        (void *) BPF_FUNC_map_lookup_elem;</span><br><span class="line">static int (*bpf_map_update_elem)(void *map, void *key, void *value,</span><br><span class="line">                                  unsigned long long flags) &#x3D;</span><br><span class="line">        (void *) BPF_FUNC_map_update_elem;</span><br></pre></td></tr></table></figure>
<p>上面只是对bpf函数赋值为bpf内核函数对应的整数标识</p>
<p>为使用libbpf，这里通过在内核源码目录下编译安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd kernel_dir&#x2F;tools&#x2F;lib&#x2F;bpf</span><br><span class="line">make &amp;&amp; make install &amp;&amp; make install_headers</span><br></pre></td></tr></table></figure>
<p>这样缺省头文件安装到/usr/local/include，库文件安装到/usr/local/lib64下面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~&#x2F;bpftest&#x2F;bpf_skeleton# ls user&#x2F;</span><br><span class="line">bitehist.c       bpf_load.c  linux     perf-sys.h</span><br><span class="line">bitehist_kern.o  bpf_load.h  Makefile</span><br></pre></td></tr></table></figure>
<p>可能注意到为何有linux/types.h，uapi不是有对应头文件吗? 使用uapi下的types.h需要定义<strong>KERNEL</strong>，这里使用tools下自带的，可以不依赖内核头文件就可以编译用户态代码<br>bpf_load.c是从samples/bpf下拷贝过来的，里面是bpd加载的实用函数，非常方便。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过上面步骤，我们拥有了一个可以使用的bpf框架，开始编写自己的bpf程序吧</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://github.com/brendangregg/BPF-tools/tree/master/new/2019-05-21" target="_blank" rel="noopener">BPF tools</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>从一个tcp窗口探测差一问题的patch看TCP协议中的使用的定时器</title>
    <url>/2020/03/10/%E4%BB%8E%E4%B8%80%E4%B8%AAtcp%E7%AA%97%E5%8F%A3%E6%8E%A2%E6%B5%8B%E5%B7%AE%E4%B8%80%E9%97%AE%E9%A2%98%E7%9A%84patch%E7%9C%8BTCP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    <content><![CDATA[<h2 id="从一个tcp窗口探测差一问题的patch看TCP协议中的使用的定时器"><a href="#从一个tcp窗口探测差一问题的patch看TCP协议中的使用的定时器" class="headerlink" title="从一个tcp窗口探测差一问题的patch看TCP协议中的使用的定时器"></a>从一个tcp窗口探测差一问题的patch看TCP协议中的使用的定时器</h2><p>这个<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/net/ipv4/tcp_timer.c?id=3976535af0cb9fe34a55f2ffb8d7e6b39a2f8188" target="_blank" rel="noopener">patch</a>的描述如下:</p>
<blockquote>
<p>Previously there is an off-by-one bug on determining when to abort<br>a stalled window-probing socket. This patch fixes that so it is<br>consistent with tcp_write_timeout().</p>
</blockquote>
<p>从描述看关于何时中止执行窗口探测的socket的。下面从协议规范中寻找定时器使用。</p>
<h2 id="TCP协议中的timer"><a href="#TCP协议中的timer" class="headerlink" title="TCP协议中的timer"></a>TCP协议中的timer</h2><p><img src="/2020/03/10/%E4%BB%8E%E4%B8%80%E4%B8%AAtcp%E7%AA%97%E5%8F%A3%E6%8E%A2%E6%B5%8B%E5%B7%AE%E4%B8%80%E9%97%AE%E9%A2%98%E7%9A%84patch%E7%9C%8BTCP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8/TCP-Timers-1.png" alt="TCP协议中的定时器"></p>
<p>协议中主要有4个定时器，注意这里每个TCP连接都有4个定时器。</p>
<ol>
<li>Time Out Timer<blockquote>
<p>TCP uses a time out timer for retransmission of lost segments.</p>
</blockquote>
</li>
<li>Time Wait Timer<blockquote>
<p>TCP uses a time wait timer during connection termination.</p>
</blockquote>
</li>
<li>Keep Alive Timer<blockquote>
<p>TCP uses a keep alive timer to prevent long idle TCP connections.</p>
</blockquote>
</li>
<li>Persistent Timer<blockquote>
<p>TCP uses a persistent timer to deal with a zero-widow-size deadlock situation.<br>It keeps the window size information flowing even if the other end closes its receiver window.</p>
</blockquote>
</li>
</ol>
<p>从patch的描述看主要涉及窗口探测，即Persistent Timer。</p>
<h3 id="Persistent-Timer的作用"><a href="#Persistent-Timer的作用" class="headerlink" title="Persistent Timer的作用"></a>Persistent Timer的作用</h3><p>Consider the following situation:</p>
<ol>
<li>Sender receives an acknowledgment from the receiver with zero window size.</li>
<li>This indicates the sender to wait.</li>
<li>Later, receiver updates the window size and and sends the segment with the update to the sender.</li>
<li>This segment gets lost.</li>
<li>Now, both sender and receiver keeps waiting for each other to do something. To deal with such a situation, TCP uses a persistent timer.</li>
</ol>
<p>发送测收到zero-window-size的ack报文后，发送测不能再发送报文，等待后续接收测更新窗口大小报文通知。为了防止该通知消息被丢的情况，使用<br>persistent timer，发送测会周期性的窗口探测报文消息，接收测回应该窗口探测消息。如果窗口大小为0，则继续窗口探测过程；非零则恢复数据传输过程。</p>
<p>接下来分析下在linux内核中TCP协议栈所使用的定时器。</p>
<h2 id="linux内核中的timer"><a href="#linux内核中的timer" class="headerlink" title="linux内核中的timer"></a>linux内核中的timer</h2><p>在linux内核中每条tcp连接使用一个inet_connection_sock的结构描述。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct inet_connection_sock &#123;</span><br><span class="line">	struct inet_sock &#123;</span><br><span class="line">		struct sock &#123;</span><br><span class="line">			struct timer_list	sk_timer; &#x2F;&#x2F;(1) keepalive timer</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> 	struct timer_list	  icsk_retransmit_timer; &#x2F;&#x2F;(2) time out timer</span><br><span class="line"> 	struct timer_list	  icsk_delack_timer; &#x2F;&#x2F;(3) delay ack timer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="sk-timer"><a href="#sk-timer" class="headerlink" title="sk_timer"></a>sk_timer</h3><p>sk_timer作为keepalive timer使用，在socket设置SOCK_KEEPOPEN时才启用。</p>
<p>keepalive timer流程如下:<br><img src="/2020/03/10/%E4%BB%8E%E4%B8%80%E4%B8%AAtcp%E7%AA%97%E5%8F%A3%E6%8E%A2%E6%B5%8B%E5%B7%AE%E4%B8%80%E9%97%AE%E9%A2%98%E7%9A%84patch%E7%9C%8BTCP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8/keepalive.png" alt="keepalive机制"></p>
<p>linux内核对keepalive的处理代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void tcp_keepalive_timer (struct timer_list *t)</span><br><span class="line">	...</span><br><span class="line">	if (elapsed &gt;&#x3D; keepalive_time_when(tp)) &#123; &#x2F;&#x2F; 7200s</span><br><span class="line">			&#x2F;* If the TCP_USER_TIMEOUT option is enabled, use that</span><br><span class="line">			 * to determine when to timeout instead.</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			if ((icsk-&gt;icsk_user_timeout !&#x3D; 0 &amp;&amp;</span><br><span class="line">				elapsed &gt;&#x3D; msecs_to_jiffies(icsk-&gt;icsk_user_timeout) &amp;&amp;</span><br><span class="line">				icsk-&gt;icsk_probes_out &gt; 0) ||</span><br><span class="line">				(icsk-&gt;icsk_user_timeout &#x3D;&#x3D; 0 &amp;&amp;</span><br><span class="line">				icsk-&gt;icsk_probes_out &gt;&#x3D; keepalive_probes(tp))) &#123; &#x2F;&#x2F;到达次数限制9</span><br><span class="line">					tcp_send_active_reset(sk, GFP_ATOMIC);</span><br><span class="line">					tcp_write_err(sk);</span><br><span class="line">					goto out;</span><br><span class="line">			&#125;</span><br><span class="line">			if (tcp_write_wakeup(sk, LINUX_MIB_TCPKEEPALIVE) &lt;&#x3D; 0) &#123; &#x2F;&#x2F;发送probe报文</span><br><span class="line">					icsk-&gt;icsk_probes_out++;</span><br><span class="line">					elapsed &#x3D; keepalive_intvl_when(tp);&#x2F;&#x2F; 75s</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">					&#x2F;* If keepalive was lost due to local congestion,</span><br><span class="line">					 * try harder.</span><br><span class="line">					 *&#x2F;</span><br><span class="line">					elapsed &#x3D; TCP_RESOURCE_PROBE_INTERVAL;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">			&#x2F;* It is tp-&gt;rcv_tstamp + keepalive_time_when(tp) *&#x2F;</span><br><span class="line">			elapsed &#x3D; keepalive_time_when(tp) - elapsed;</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<p>在上面代码中使用<strong>icsk_probes_out</strong>对probe次数进行统计。keepalive_probes缺省设置为9。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_keepalive_probes &#x3D; 9</span><br></pre></td></tr></table></figure>

<p>使用上面的内核选项可以设置该值。</p>
<p>tcp_write_wakeup负责发出probe报文，这个函数首先判断socket发送队列是否<br>有报文等待发送，如果有则发送sk-&gt;sk_send_head报文(注意这个指针总是指向下一个要<br>发送的报文)；如果发送队列空则发送probe报文(注意这个报文的序列号为out of date即无效)。</p>
<p>如果报文能够到达接收测，则接收测回复ack消息。下面是收到ack报文的处理流程:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void tcp_ack_probe(struct sock *sk)</span><br><span class="line">&#123;</span><br><span class="line">        struct inet_connection_sock *icsk &#x3D; inet_csk(sk);</span><br><span class="line">        struct sk_buff *head &#x3D; tcp_send_head(sk);</span><br><span class="line">        const struct tcp_sock *tp &#x3D; tcp_sk(sk);</span><br><span class="line"></span><br><span class="line">        &#x2F;* Was it a usable window open? *&#x2F;</span><br><span class="line">        if (!head)</span><br><span class="line">                return;</span><br><span class="line">        if (!after(TCP_SKB_CB(head)-&gt;end_seq, tcp_wnd_end(tp))) &#123; &#x2F;&#x2F; normal window size</span><br><span class="line">                icsk-&gt;icsk_backoff &#x3D; 0;</span><br><span class="line">                inet_csk_clear_xmit_timer(sk, ICSK_TIME_PROBE0);</span><br><span class="line">                &#x2F;* Socket must be waked up by subsequent tcp_data_snd_check().</span><br><span class="line">                 * This function is not for random using!</span><br><span class="line">                 *&#x2F;</span><br><span class="line">        &#125; else &#123; &#x2F;&#x2F; zero-window-size</span><br><span class="line">                unsigned long when &#x3D; tcp_probe0_when(sk, TCP_RTO_MAX);</span><br><span class="line"></span><br><span class="line">                tcp_reset_xmit_timer(sk, ICSK_TIME_PROBE0,</span><br><span class="line">                                     when, TCP_RTO_MAX, NULL);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果接收测返回报文通知窗口大小为0则继续窗口探测过程，由于有接收到报文，<br>这时keepalive超时时判断距离上次报文时间不会超过7200s，这样keepalive定时器<br>重置为7200s超时。</p>
<p>如果报文无法到达接收测，keepalive在75秒后超时，重新发送probe报文直到到达内核设置的<br>tcp_keepalive_probes次后终止该tcp连接。</p>
<p>linux内核使用<strong>icsk_probes_out</strong>统计keepalive的探测次数和zero-window-size的探测次数。考虑下面的<br>一种情况：<br>keepalive定时器超时了3次后，才从接收测收到ack消息，这时开始窗口探测过程，这里并没有对<strong>icsk_probes_out</strong><br>清零，而是继续增加<strong>icsk_probes_out</strong>次数，这样处理有意简化窗口探测的过程。</p>
<h2 id="icsk-retransmit-timer"><a href="#icsk-retransmit-timer" class="headerlink" title="icsk_retransmit_timer"></a>icsk_retransmit_timer</h2><p>即重传定时器，对应协议中的Time Out Timer和Persistent Timer。<br>内核使用一个定时器处理重传定时器和zero-window-size的探测定时器使用。    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_retries2 &#x3D; 15</span><br></pre></td></tr></table></figure>
<p>内核设置重传次数和zero-window-size次数限制为上面的值。</p>
<p><img src="/2020/03/10/%E4%BB%8E%E4%B8%80%E4%B8%AAtcp%E7%AA%97%E5%8F%A3%E6%8E%A2%E6%B5%8B%E5%B7%AE%E4%B8%80%E9%97%AE%E9%A2%98%E7%9A%84patch%E7%9C%8BTCP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8/zero-window-size.png" alt="zero-window-size机制"></p>
<p><img src="/2020/03/10/%E4%BB%8E%E4%B8%80%E4%B8%AAtcp%E7%AA%97%E5%8F%A3%E6%8E%A2%E6%B5%8B%E5%B7%AE%E4%B8%80%E9%97%AE%E9%A2%98%E7%9A%84patch%E7%9C%8BTCP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8/retransmit.png" alt="retransmit机制"></p>
<h3 id="icsk-delack-timer"><a href="#icsk-delack-timer" class="headerlink" title="icsk_delack_timer"></a>icsk_delack_timer</h3><p>待更新</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.gatevidyalay.com/tcp-timers-transmission-control-protocol/" target="_blank" rel="noopener">tcp协议中的timer</a></li>
<li><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/" target="_blank" rel="noopener">kernel source</a></li>
</ol>
]]></content>
      <categories>
        <category>network</category>
        <category>kernel</category>
      </categories>
      <tags>
        <tag>tcp</tag>
        <tag>timer</tag>
        <tag>keepalive</tag>
        <tag>zero-window-size</tag>
      </tags>
  </entry>
  <entry>
    <title>分析一下目前linux内核栈的实现</title>
    <url>/2020/02/27/%E5%88%86%E6%9E%90%E4%B8%80%E4%B8%8B%E7%9B%AE%E5%89%8Dlinux%E5%86%85%E6%A0%B8%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近在看内核一个<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/net/sunrpc/auth_gss/gss_krb5_seqnum.c?h=v5.6-rc3&id=e7afe6c1d486b516ed586dcc10b3e7e3e85a9c2b" target="_blank" rel="noopener">patch</a>的修改，这个patch的commit描述<br>如下:</p>
<blockquote>
<p>While trying to reproduce a reported kernel panic on arm64, I discovered<br>that AUTH_GSS basically doesn’t work at all with older enctypes on arm64<br>systems with CONFIG_VMAP_STACK enabled.  It turns out there still a few<br>places using stack memory with scatterlists, causing krb5_encrypt() and<br>krb5_decrypt() to produce incorrect results (or a BUG if CONFIG_DEBUG_SG<br>is enabled).<br>描述里边提到CONFIG_VMAP_STACK内核宏和scatterlist。下面对它们分析。</p>
</blockquote>
<h2 id="CONFIG-VMAP-STACK"><a href="#CONFIG-VMAP-STACK" class="headerlink" title="CONFIG_VMAP_STACK"></a>CONFIG_VMAP_STACK</h2><h3 id="CONFIG-VMAP-STACK的功能"><a href="#CONFIG-VMAP-STACK的功能" class="headerlink" title="CONFIG_VMAP_STACK的功能"></a>CONFIG_VMAP_STACK的功能</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:&#x2F;share&#x2F;linux# find . -name Kconfig | xargs grep -rsn VMAP_STACK</span><br><span class="line">.&#x2F;arch&#x2F;Kconfig:821:config HAVE_ARCH_VMAP_STACK</span><br><span class="line">.&#x2F;arch&#x2F;Kconfig:841:config VMAP_STACK</span><br><span class="line">.&#x2F;arch&#x2F;Kconfig:844:     depends on HAVE_ARCH_VMAP_STACK</span><br><span class="line">.&#x2F;arch&#x2F;arm64&#x2F;Kconfig:135:       select HAVE_ARCH_VMAP_STACK</span><br><span class="line">.&#x2F;arch&#x2F;s390&#x2F;Kconfig:133:        select HAVE_ARCH_VMAP_STACK</span><br><span class="line">.&#x2F;arch&#x2F;s390&#x2F;Kconfig:714:        depends on !VMAP_STACK</span><br><span class="line">.&#x2F;arch&#x2F;x86&#x2F;Kconfig:152: select HAVE_ARCH_VMAP_STACK             if X86_64</span><br></pre></td></tr></table></figure>
<p>从搜索结果看，这个功能是和架构相关的。<br>再来看下该配置宏的具体描述：</p>
<blockquote>
<p>config VMAP_STACK<br>       default y<br>       bool “Use a virtually-mapped stack”<br>       depends on HAVE_ARCH_VMAP_STACK<br>       depends on !KASAN || KASAN_VMALLOC<br>       —help—<br>         Enable this if you want the use virtually-mapped kernel stacks<br>         with guard pages.  This causes kernel stack overflows to be<br>         caught immediately rather than causing difficult-to-diagnose<br>         corruption.</p>
<pre><code>To use this with KASAN, the architecture must support backing
virtual mappings with real shadow memory, and KASAN_VMALLOC must
 be enabled.</code></pre></blockquote>
<p>如果内核开启CONFIG_VMAP_STACK，内核可以快速检测内核栈overflow异常，比之前在内核栈溢出<br>访问时出问题难以诊断，内核栈溢出肯定访问垃圾数据，其结果不可预测的，难以排查，在有个guardpage后<br>只要内核栈溢出访问，内核可以快速捕获到。</p>
<p>内核栈的申请通过alloc_thread_stack_node实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static unsigned long *alloc_thread_stack_node(struct task_struct *tsk, int node)</span><br><span class="line">&#123;</span><br><span class="line">#ifdef CONFIG_VMAP_STACK</span><br><span class="line">        void *stack;</span><br><span class="line">        int i;</span><br><span class="line"></span><br><span class="line">        for (i &#x3D; 0; i &lt; NR_CACHED_STACKS; i++) &#123;</span><br><span class="line">                struct vm_struct *s;</span><br><span class="line"></span><br><span class="line">                s &#x3D; this_cpu_xchg(cached_stacks[i], NULL);</span><br><span class="line"></span><br><span class="line">                if (!s)</span><br><span class="line">                        continue;</span><br><span class="line"></span><br><span class="line">                &#x2F;* Clear the KASAN shadow of the stack. *&#x2F;</span><br><span class="line">                kasan_unpoison_shadow(s-&gt;addr, THREAD_SIZE);</span><br><span class="line"></span><br><span class="line">                &#x2F;* Clear stale pointers from reused stack. *&#x2F;</span><br><span class="line">                memset(s-&gt;addr, 0, THREAD_SIZE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                tsk-&gt;stack_vm_area &#x3D; s;</span><br><span class="line">                tsk-&gt;stack &#x3D; s-&gt;addr;</span><br><span class="line">                return s-&gt;addr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;*</span><br><span class="line">         * Allocated stacks are cached and later reused by new threads,</span><br><span class="line">         * so memcg accounting is performed manually on assigning&#x2F;releasing</span><br><span class="line">         * stacks to tasks. Drop __GFP_ACCOUNT.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        stack &#x3D; __vmalloc_node_range(THREAD_SIZE, THREAD_ALIGN,</span><br><span class="line">                                     VMALLOC_START, VMALLOC_END,</span><br><span class="line">                                     THREADINFO_GFP &amp; ~__GFP_ACCOUNT,</span><br><span class="line">                                     PAGE_KERNEL,</span><br><span class="line">                                     0, node, __builtin_return_address(0));</span><br><span class="line">        &#x2F;*</span><br><span class="line">         * We can&#39;t call find_vm_area() in interrupt context, and</span><br><span class="line">         * free_thread_stack() can be called in interrupt context,</span><br><span class="line">         * so cache the vm_struct.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        if (stack) &#123;</span><br><span class="line">                tsk-&gt;stack_vm_area &#x3D; find_vm_area(stack);</span><br><span class="line">                tsk-&gt;stack &#x3D; stack;</span><br><span class="line">        &#125;</span><br><span class="line">        return stack;</span><br><span class="line"></span><br><span class="line">#else</span><br><span class="line">        struct page *page &#x3D; alloc_pages_node(node, THREADINFO_GFP,</span><br><span class="line">                                             THREAD_SIZE_ORDER);</span><br><span class="line"></span><br><span class="line">        if (likely(page)) &#123;</span><br><span class="line">                tsk-&gt;stack &#x3D; page_address(page);</span><br><span class="line">                return tsk-&gt;stack;</span><br><span class="line">        &#125;</span><br><span class="line">        return NULL;</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了避免vmalloc的频繁调用，内核使用cached_stacks本地缓存数组，保存进程退出时的内核栈指针。在<br>创建进程时可以直接从cached_stacks本地缓存数组获取可用的内核栈。</p>
<p>如果cached_stacks本地缓存数组不可用，则通过vmalloc接口申请内核栈。vmalloc申请的空间并不保证是<br>物理连续的页。</p>
<p>vmalloc申请的空间在使用上要注意：</p>
<ol>
<li>不能用于DMA操作<blockquote>
<p>DMA硬件没有页面映射，需要物理上连续的空间。</p>
</blockquote>
</li>
<li>不能用于scatterlist<blockquote>
<p>后面分析</p>
</blockquote>
</li>
</ol>
<p>在不启用CONFIG_VMAP_STACK时，内核使用alloc_pages_node申请内核栈空间。这个接口申请连续的物理页<br>作为内核栈。</p>
<h3 id="内核栈大小"><a href="#内核栈大小" class="headerlink" title="内核栈大小"></a>内核栈大小</h3><p>前面分析了内核栈的分配，那么内核栈占多少空间呢？</p>
<blockquote>
<p>THREAD_SIZE宏定义了内核栈的大小。</p>
</blockquote>
<p>THREAD_SIZE是架构相关的，在x86上定义为2个page的大小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define THREAD_SIZE_ORDER       1</span><br><span class="line">#define THREAD_SIZE             (PAGE_SIZE &lt;&lt; THREAD_SIZE_ORDER)</span><br></pre></td></tr></table></figure>

<p>在x86_64上定义为如下大小，开启KASAN，则分配8个page的大小，不开启KSASAN则定义为4个page的大小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ifdef CONFIG_KASAN</span><br><span class="line">#define KASAN_STACK_ORDER 1</span><br><span class="line">#else</span><br><span class="line">#define KASAN_STACK_ORDER 0</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#define THREAD_SIZE_ORDER       (2 + KASAN_STACK_ORDER)</span><br><span class="line">#define THREAD_SIZE  (PAGE_SIZE &lt;&lt; THREAD_SIZE_ORDER)</span><br></pre></td></tr></table></figure>

<p>这里提高了KASAN功能，这个是什么功能呢？</p>
<blockquote>
<p>Kasan 是 Kernel Address Sanitizer 的缩写，它是一个动态检测内存错误的工具，主要功能是<br>检查内存越界访问和使用已释放的内存等问题。Kasan 集成在 Linux 内核中，随 Linux 内核<br>代码一起发布，并由内核社区维护和发展。</p>
</blockquote>
<p>这里不对KASAN功能进行分析，更多的可以参考下面的文档。<br>KASAN扩展阅读</p>
<ol>
<li><a href="https://www.kernel.org/doc/html/v4.14/dev-tools/kasan.html" target="_blank" rel="noopener">KASAN内核文档</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/linux/1608_tengr_kasan/index.html" target="_blank" rel="noopener">KASAN简单介绍</a></li>
</ol>
<h3 id="内核栈的布局"><a href="#内核栈的布局" class="headerlink" title="内核栈的布局"></a>内核栈的布局</h3><p>内核栈布局和架构相关，x86配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat arch&#x2F;x86&#x2F;Kconfig</span><br><span class="line">config X86</span><br><span class="line">        def_bool y</span><br><span class="line">		...</span><br><span class="line">		select THREAD_INFO_IN_TASK</span><br><span class="line">		...</span><br><span class="line"></span><br><span class="line">$ cat include&#x2F;linux&#x2F;sched.h</span><br><span class="line">struct task_struct &#123;</span><br><span class="line">#ifdef CONFIG_THREAD_INFO_IN_TASK</span><br><span class="line">        &#x2F;*</span><br><span class="line">         * For reasons of header soup (see current_thread_info()), this</span><br><span class="line">         * must be the first element of task_struct.</span><br><span class="line">         *&#x2F;</span><br><span class="line">        struct thread_info              thread_info;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
<p>由上可见在x86上，内核栈就是单纯的内核栈，thread_info结构不在内核栈的低端地址上，而是移到了task_struct结构中，这样好处是<br>内核栈溢出时不会破坏thread_info结构，更加安全。</p>
<p>之前内核栈的布局是这样的，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">high address                low address </span><br><span class="line">|----------------------|&lt;--------&gt;|</span><br><span class="line">                        thread_info</span><br></pre></td></tr></table></figure>

<h2 id="scatterlist"><a href="#scatterlist" class="headerlink" title="scatterlist"></a>scatterlist</h2><p>scatterlist用来描述一内存段，其结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct scatterlist &#123;</span><br><span class="line">        unsigned long   page_link;</span><br><span class="line">        unsigned int    offset;</span><br><span class="line">        unsigned int    length;</span><br><span class="line">        dma_addr_t      dma_address;</span><br><span class="line">#ifdef CONFIG_NEED_SG_DMA_LENGTH</span><br><span class="line">        unsigned int    dma_length;</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>page_link是page指针，这里复用该page指针使其支持<a href="https://lwn.net/Articles/234617/" target="_blank" rel="noopener">scatterlist chain</a>。<br>每个scatterlist描述一个物理页的内存片段。</p>
<p>为何vmalloc空间不能用于scatterlist呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">         vmalloc buffer</span><br><span class="line">          |-------------|</span><br><span class="line">|-------------|-----------|</span><br><span class="line">        pageX	       pageY</span><br></pre></td></tr></table></figure>
<p>如果vmalloc buffer跨page边界，看会发生什么。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat net&#x2F;sunrpc&#x2F;auth_gss&#x2F;gss_krb5_crypto.c</span><br><span class="line">u32</span><br><span class="line">krb5_encrypt(</span><br><span class="line">        struct crypto_sync_skcipher *tfm,</span><br><span class="line">        void * iv,</span><br><span class="line">        void * in,</span><br><span class="line">        void * out,</span><br><span class="line">        int length)</span><br><span class="line">&#123;</span><br><span class="line">        u32 ret &#x3D; -EINVAL;</span><br><span class="line">        struct scatterlist sg[1];</span><br><span class="line">		...</span><br><span class="line">		memcpy(out, in, length);</span><br><span class="line">        sg_init_one(sg, out, length);</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br><span class="line">$ cat lib&#x2F;scatterlist.c</span><br><span class="line">void sg_init_one(struct scatterlist *sg, const void *buf, unsigned int buflen)</span><br><span class="line">&#123;</span><br><span class="line">        sg_init_table(sg, 1);</span><br><span class="line">        sg_set_buf(sg, buf, buflen);</span><br><span class="line">&#125;</span><br><span class="line">$ cat include&#x2F;linux&#x2F;scatterlist.h</span><br><span class="line">static inline void sg_set_buf(struct scatterlist *sg, const void *buf,</span><br><span class="line">			      unsigned int buflen)</span><br><span class="line">&#123;</span><br><span class="line">#ifdef CONFIG_DEBUG_SG</span><br><span class="line">	BUG_ON(!virt_addr_valid(buf));</span><br><span class="line">#endif</span><br><span class="line">	sg_set_page(sg, virt_to_page(buf), buflen, offset_in_page(buf));</span><br><span class="line">&#125;</span><br><span class="line">$ cat include&#x2F;linux&#x2F;scatterlist.h</span><br><span class="line">static inline void sg_set_page(struct scatterlist *sg, struct page *page,</span><br><span class="line">			       unsigned int len, unsigned int offset)</span><br><span class="line">&#123;</span><br><span class="line">	sg_assign_page(sg, page);</span><br><span class="line">	sg-&gt;offset &#x3D; offset;</span><br><span class="line">	sg-&gt;length &#x3D; len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在sg_set_page后，scatterlist只记录了pageX，后面的pageY是没有记录的，后面使用scatterlist时<br>可能访问到垃圾数据。可见vmalloc空间时不能用于scatterlist的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文分析了CONFIG_VMAP_STACK和scatterlist的功能，在使能CONFIG_VMAP_STACK后，内核栈上分配的<br>空间是物理上不连续的，不能用于scatterlist，不能用于DMA。</p>
]]></content>
      <categories>
        <category>kernel</category>
      </categories>
      <tags>
        <tag>内核栈</tag>
        <tag>CONFIG_VMAP_STACK</tag>
        <tag>scatterlist</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu清理磁盘空间</title>
    <url>/2020/02/25/ubuntu%E6%B8%85%E7%90%86%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>虽然linux不像windows那样需要碎片整理，随着时间的流逝，硬盘空间会<br>越来越小，有必要对硬件空间清理。以ubuntu为例说明如何清理硬盘空间。</p>
<h2 id="查看硬盘占用"><a href="#查看硬盘占用" class="headerlink" title="查看硬盘占用"></a>查看硬盘占用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            934M     0  934M   0% &#x2F;dev</span><br><span class="line">tmpfs           193M  2.6M  191M   2% &#x2F;run</span><br><span class="line">&#x2F;dev&#x2F;sda1       8.8G  6.5G  1.9G  78% &#x2F;</span><br><span class="line">tmpfs           965M     0  965M   0% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% &#x2F;run&#x2F;lock</span><br><span class="line">tmpfs           965M     0  965M   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">tmpfs           193M     0  193M   0% &#x2F;run&#x2F;user&#x2F;0</span><br><span class="line">tmpfs           193M     0  193M   0% &#x2F;run&#x2F;user&#x2F;1000</span><br><span class="line">&#x2F;dev&#x2F;sdb1       127G  3.0G  125G   3% &#x2F;share</span><br></pre></td></tr></table></figure>
<p>这里根分区可用空间不足，需要对根分区下目录空间占用进行分析。</p>
<h2 id="查看根分区目录空间占用"><a href="#查看根分区目录空间占用" class="headerlink" title="查看根分区目录空间占用"></a>查看根分区目录空间占用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ du -h --max-depth&#x3D;1 &#x2F;</span><br><span class="line">23M	&#x2F;opt</span><br><span class="line">0	&#x2F;dev</span><br><span class="line">236M	&#x2F;boot</span><br><span class="line">8.0K	&#x2F;snap</span><br><span class="line">5.8M	&#x2F;lib32</span><br><span class="line">3.1G	&#x2F;usr</span><br><span class="line">0	&#x2F;sys</span><br><span class="line">156M	&#x2F;root</span><br><span class="line">16K	&#x2F;lost+found</span><br><span class="line">0	&#x2F;proc</span><br><span class="line">12K	&#x2F;media</span><br><span class="line">4.0K	&#x2F;srv</span><br><span class="line">6.5M	&#x2F;libx32</span><br><span class="line">4.0K	&#x2F;lib64</span><br><span class="line">4.0K	&#x2F;mnt</span><br><span class="line">12M	&#x2F;etc</span><br><span class="line">1.1G	&#x2F;lib</span><br><span class="line">2.8G	&#x2F;share</span><br><span class="line">704M	&#x2F;var</span><br><span class="line">2.9M	&#x2F;run</span><br><span class="line">18M	&#x2F;bin</span><br><span class="line">1.1G	&#x2F;home</span><br><span class="line">19M	&#x2F;sbin</span><br><span class="line">48K	&#x2F;tmp</span><br><span class="line">4.0K	&#x2F;nextcloud</span><br><span class="line">9.2G	&#x2F;</span><br></pre></td></tr></table></figure>

<p>随着时间的流逝，log目录会比较大，可以通过journalctl命令控制日志文件所占空<br>间的大小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ journalctl --vaccum-size&#x3D;100M</span><br></pre></td></tr></table></figure>

<h1 id="清空安装的软件包备份"><a href="#清空安装的软件包备份" class="headerlink" title="清空安装的软件包备份"></a>清空安装的软件包备份</h1><p>ubuntu把安装的软件包缓存在如下目录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;</span><br><span class="line">lock partial</span><br></pre></td></tr></table></figure>

<p>然后通过下面的命令删除缓存的安装包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt clean</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过以上步骤，硬盘空间大了许多。</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>bpf入门系列-1</title>
    <url>/2020/02/13/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-1/</url>
    <content><![CDATA[<h2 id="bpf的build环境"><a href="#bpf的build环境" class="headerlink" title="bpf的build环境"></a>bpf的build环境</h2><p>简单讲，bpf是内核内置的虚拟机，对bpf的支持，内核需要开启编译选项如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONFIG_BPF&#x3D;y</span><br><span class="line">CONFIG_BPF_SYSCALL&#x3D;y</span><br><span class="line">CONFIG_NET_CLS_BPF&#x3D;m</span><br><span class="line">CONFIG_NET_ACT_BPF&#x3D;m</span><br><span class="line">CONFIG_BPF_JIT&#x3D;y</span><br><span class="line">CONFIG_HAVE_BPF_JIT&#x3D;y</span><br><span class="line">CONFIG_BPF_EVENTS&#x3D;y</span><br></pre></td></tr></table></figure>
<p>[1]中是在oracle linux上面的介绍，在ubuntu1804上遇到很多问题，这里把问题列举下。</p>
<h2 id="build-environment"><a href="#build-environment" class="headerlink" title="build environment"></a>build environment</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Distro: ubuntu 1804</span><br><span class="line">Kernel: 5.3.0-42</span><br><span class="line">Packages:</span><br><span class="line">linux-image-5.3.0-42-generic</span><br><span class="line">linux-image-5.3.0-42-generic-dbgsym</span><br><span class="line">linux-headers-5.3.0-42-generic</span><br><span class="line">linux-headers-5.3.0-42</span><br><span class="line">linux-source-5.3.0</span><br><span class="line">llvm-9</span><br><span class="line">clang-9</span><br><span class="line">libelf-dev</span><br></pre></td></tr></table></figure>
<p>在ubuntu1804上我安装了5.3.0的内核，llvm和clang都是安装的9的，另外要安装elf开发库。由于Makefile中使用clang和llc命令，这里建立软链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;bin&#x2F;llc-9 &#x2F;usr&#x2F;bin&#x2F;llc</span><br><span class="line">ln -s &#x2F;usr&#x2F;bin&#x2F;clang-9 &#x2F;usr&#x2F;bin&#x2F;clang</span><br></pre></td></tr></table></figure>

<p>把代码clone到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;oracle&#x2F;linux-blog-sample-code.git</span><br></pre></td></tr></table></figure>

<p>master分支只有README，源码文件在bpf-test分支上，所以切换分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b bpf-test origin&#x2F;bpf-test</span><br></pre></td></tr></table></figure>

<p>这时编译例子程序，有如下错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd bpf-test</span><br><span class="line">$ make</span><br><span class="line">...</span><br><span class="line">LLVM ERROR: &#39;helper_test_init&#39; label emitted multiple times to assembly file</span><br><span class="line">Makefile:69: recipe for target &#39;test_bpf_helper_init_kern.o&#39; failed</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><a href="https://patchwork.ozlabs.org/patch/808209/" target="_blank" rel="noopener">这里</a>提到如果section名字和函数名字一样，clang会报错。我们可以<br>修改一下函数名字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bpf&#x2F;test_bpf_helper_init_kern.c</span><br><span class="line">helper_test_init &#x3D;&gt; helper_test_init_prog</span><br></pre></td></tr></table></figure>

<p>继续编译发现还有类似错误，可以按照这种方式修改。由于其它地方使用了宏方式定义section，这里修改宏定义，在函数名后追加_prog</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bpf&#x2F;test_bpf_helper_kern.h</span><br><span class="line"></span><br><span class="line">#define BPF_HELPER_TEST_FUNC(helper, name, direction)                   \</span><br><span class="line">SEC(BPF_HELPER_TEST_NAME(helper, name, direction))                      \</span><br><span class="line">static __always_inline int helper##_##name##_##direction##_prog(struct __sk_buff *skb)</span><br></pre></td></tr></table></figure>

<p>这样bpf程序可以正确编译出来，后面开始运行例子程序。</p>
<h2 id="run-problem"><a href="#run-problem" class="headerlink" title="run problem"></a>run problem</h2><p>在运行程序时有如下错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~&#x2F;bpftest&#x2F;linux-blog-sample-code&#x2F;bpf-test# make test</span><br><span class="line">make  -C bpf test</span><br><span class="line">make[1]: Entering directory &#39;&#x2F;root&#x2F;bpftest&#x2F;linux-blog-sample-code&#x2F;bpf-test&#x2F;bpf&#39;</span><br><span class="line">make[1]: &#39;test&#39; is up to date.</span><br><span class="line">make[1]: Leaving directory &#39;&#x2F;root&#x2F;bpftest&#x2F;linux-blog-sample-code&#x2F;bpf-test&#x2F;bpf&#39;</span><br><span class="line">make  -C user test</span><br><span class="line">make[1]: Entering directory &#39;&#x2F;root&#x2F;bpftest&#x2F;linux-blog-sample-code&#x2F;bpf-test&#x2F;user&#39;</span><br><span class="line">bash test_bpf_helper_run.sh</span><br><span class="line">before setup</span><br><span class="line">0 maps not supported in current map section!</span><br><span class="line">Error fixing up map structure, incompatible struct bpf_elf_map used?</span><br><span class="line">Error fetching ELF ancillary data!</span><br><span class="line">Unable to load program</span><br><span class="line">setup ok</span><br><span class="line">could not find map bpf_helper_test_map: No such file or directory</span><br><span class="line">Makefile:63: recipe for target &#39;test&#39; failed</span><br><span class="line">make[1]: *** [test] Error 1</span><br><span class="line">make[1]: Leaving directory &#39;&#x2F;root&#x2F;bpftest&#x2F;linux-blog-sample-code&#x2F;bpf-test&#x2F;user&#39;</span><br><span class="line">Makefile:69: recipe for target &#39;test-user&#39; failed</span><br><span class="line">make: *** [test-user] Error 2</span><br></pre></td></tr></table></figure>

<p>大致是说在bpf程序中找不到map。</p>
<p>测试命令执行的是以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tc filter add dev veth1 ingress bpf da \</span><br><span class="line">            obj ..&#x2F;bpf&#x2F;test_bpf_helper_init_kern.o \</span><br><span class="line">            sec helper_test_init</span><br></pre></td></tr></table></figure>
<p>tc是iproute2包中的命令，这里是iproute2的<a href="https://github.com/shemminger/iproute2" target="_blank" rel="noopener">upstream</a>地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;shemminger&#x2F;iproute2.git</span><br><span class="line">grep &quot;maps not supported&quot; -rsn .&#x2F;</span><br><span class="line">...</span><br><span class="line">.&#x2F;lib&#x2F;bpf.c:1886:               fprintf(stderr, &quot;struct bpf_elf_map too small, not supported!\n&quot;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>看下报错的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int bpf_fetch_maps_end(struct bpf_elf_ctx *ctx)</span><br><span class="line">&#123;</span><br><span class="line">        struct bpf_elf_map fixup[ARRAY_SIZE(ctx-&gt;maps)] &#x3D; &#123;&#125;;</span><br><span class="line">        int i, sym_num &#x3D; bpf_map_num_sym(ctx);</span><br><span class="line">        __u8 *buff;</span><br><span class="line"></span><br><span class="line">        if (sym_num &#x3D;&#x3D; 0 || sym_num &gt; ARRAY_SIZE(ctx-&gt;maps)) &#123;</span><br><span class="line">                fprintf(stderr, &quot;%u maps not supported in current map section!\n&quot;,</span><br><span class="line">                        sym_num);</span><br><span class="line">...</span><br><span class="line">static int bpf_map_num_sym(struct bpf_elf_ctx *ctx)</span><br><span class="line">&#123;</span><br><span class="line">	int i, num &#x3D; 0;</span><br><span class="line">	GElf_Sym sym;</span><br><span class="line"></span><br><span class="line">	for (i &#x3D; 0; i &lt; ctx-&gt;sym_num; i++) &#123;</span><br><span class="line">		int type;</span><br><span class="line"></span><br><span class="line">		if (gelf_getsym(ctx-&gt;sym_tab, i, &amp;sym) !&#x3D; &amp;sym)</span><br><span class="line">			continue;</span><br><span class="line"></span><br><span class="line">		type &#x3D; GELF_ST_TYPE(sym.st_info);</span><br><span class="line">		if (GELF_ST_BIND(sym.st_info) !&#x3D; STB_GLOBAL ||</span><br><span class="line">		    (type !&#x3D; STT_NOTYPE &amp;&amp; type !&#x3D; STT_OBJECT) ||</span><br><span class="line">		    sym.st_shndx !&#x3D; ctx-&gt;sec_maps)</span><br><span class="line">			continue;</span><br><span class="line">		num++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可见bpf_map_num_sym返回了0。以上是iproute2的upstream代码，检查符号类型，如果不是STT_NOTYPE和STT_OBJECT则跳过，我们需要看下ubuntu中iproute2的代码。<br>安装ubuntu中iproute2源码包。</p>
<p>下面命令会安装ubuntu仓库中最新的iproute2源码包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt source iproute2</span><br></pre></td></tr></table></figure>

<p>可能你需要特定版本的源码包，这时需要检查系统iproute2的版本号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~&#x2F;iproute2&#x2F;debian# dpkg -l | grep iproute2</span><br><span class="line">ii  iproute2                                     4.15.0-2ubuntu1                                 amd64        networking and traffic control tools</span><br><span class="line">root@ubuntu:~# apt source iproute2&#x3D;4.15.0</span><br></pre></td></tr></table></figure>

<p>这样我们可以检查对应版本4.15.0的iproute2的中bpf_map_num_sym的实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int bpf_map_num_sym(struct bpf_elf_ctx *ctx)</span><br><span class="line">&#123;</span><br><span class="line">        int i, num &#x3D; 0;</span><br><span class="line">        GElf_Sym sym;</span><br><span class="line"></span><br><span class="line">        for (i &#x3D; 0; i &lt; ctx-&gt;sym_num; i++) &#123;</span><br><span class="line">                if (gelf_getsym(ctx-&gt;sym_tab, i, &amp;sym) !&#x3D; &amp;sym)</span><br><span class="line">                        continue;</span><br><span class="line"></span><br><span class="line">                if (GELF_ST_BIND(sym.st_info) !&#x3D; STB_GLOBAL ||</span><br><span class="line">                    GELF_ST_TYPE(sym.st_info) !&#x3D; STT_NOTYPE ||</span><br><span class="line">                    sym.st_shndx !&#x3D; ctx-&gt;sec_maps)</span><br><span class="line">                        continue;</span><br><span class="line">                num++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>检查符号的类型，如果不是STT_NOTYPE则跳过。这里和upstream实现是有区别的，我们接下来需要确认我们生成的bpf程序中符号的类型。</p>
<p>首先确认有maps段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~&#x2F;bpftest&#x2F;linux-blog-sample-code&#x2F;bpf-test# llvm-readelf-9 --sections bpf&#x2F;test_bpf_helper_init_kern.o</span><br><span class="line"></span><br><span class="line">There are 23 section headers, starting at offset 0x3068:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .strtab           STRTAB          0000000000000000 002e10 000256 00      0   0  1</span><br><span class="line">  [ 2] .text             PROGBITS        0000000000000000 000040 000000 00  AX  0   0  4</span><br><span class="line">  [ 3] helper_test_init  PROGBITS        0000000000000000 000040 000010 00  AX  0   0  8</span><br><span class="line">  [ 4] .rodata.str1.1    PROGBITS        0000000000000000 000050 00025f 01 AMS  0   0  1</span><br><span class="line">  [ 5] .data             PROGBITS        0000000000000000 0002b0 0001c0 00  WA  0   0 16</span><br><span class="line">  [ 6] .rel.data         REL             0000000000000000 0023c0 000370 10     22   5  8</span><br><span class="line">  [ 7] maps              PROGBITS        0000000000000000 000470 00001c 00  WA  0   0  4</span><br><span class="line">  [ 8] license           PROGBITS        0000000000000000 00048c 000004 00  WA  0   0  1</span><br><span class="line">  [ 9] .debug_str        PROGBITS        0000000000000000 000490 0003c3 01  MS  0   0  1</span><br><span class="line">  [10] .debug_abbrev     PROGBITS        0000000000000000 000853 000103 00      0   0  1</span><br><span class="line">  [11] .debug_info       PROGBITS        0000000000000000 000956 000568 00      0   0  1</span><br><span class="line">  [12] .rel.debug_info   REL             0000000000000000 002730 000680 10     22  11  8</span><br><span class="line">  [13] .debug_macinfo    PROGBITS        0000000000000000 000ebe 000001 00      0   0  1</span><br><span class="line">  [14] .BTF              PROGBITS        0000000000000000 000ebf 0006b9 00      0   0  1</span><br><span class="line">  [15] .rel.BTF          REL             0000000000000000 002db0 000020 10     22  14  8</span><br><span class="line">  [16] .BTF.ext          PROGBITS        0000000000000000 001578 000058 00      0   0  1</span><br><span class="line">  [17] .rel.BTF.ext      REL             0000000000000000 002dd0 000020 10     22  16  8</span><br><span class="line">  [18] .eh_frame         PROGBITS        0000000000000000 0015d0 000030 00   A  0   0  8</span><br><span class="line">  [19] .rel.eh_frame     REL             0000000000000000 002df0 000010 10     22  18  8</span><br><span class="line">  [20] .debug_line       PROGBITS        0000000000000000 001600 000141 00      0   0  1</span><br><span class="line">  [21] .rel.debug_line   REL             0000000000000000 002e00 000010 10     22  20  8</span><br><span class="line">  [22] .symtab           SYMTAB          0000000000000000 001748 000c78 18      1 129  8</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)</span><br><span class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br></pre></td></tr></table></figure>

<p>从上面的输出看有maps段，再看下maps段的符号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bpf&#x2F;test_bpf_helper_kern.h</span><br><span class="line">struct bpf_elf_map SEC(&quot;maps&quot;) bpf_helper_test_map &#x3D; &#123;</span><br><span class="line">        .type &#x3D; BPF_MAP_TYPE_HASH,</span><br><span class="line">        .size_key &#x3D; sizeof(long),</span><br><span class="line">        .size_value &#x3D; sizeof(long),</span><br><span class="line">        .pinning &#x3D; PIN_GLOBAL_NS,</span><br><span class="line">        .max_elem &#x3D; 256,</span><br><span class="line">&#125;;</span><br><span class="line">root@ubuntu:~&#x2F;bpftest&#x2F;linux-blog-sample-code&#x2F;bpf-test# llvm-readelf-9 -s bpf&#x2F;test_bpf_helper_init_kern.o | grep bpf_helper_test_map</span><br><span class="line">   130: 0000000000000000    28 OBJECT  GLOBAL DEFAULT    7 bpf_helper_test_map</span><br></pre></td></tr></table></figure>
<p>哇，这里bpf_helper_test_map的类型是OBJECT，tc程序认为不是有效的符号而跳过了。我们需要修改iproute2的代码重新打包，注意有3个函数都需要修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bpf_map_num_sym</span><br><span class="line">bpf_map_verify_all_offs</span><br><span class="line">bpf_map_fetch_name</span><br></pre></td></tr></table></figure>

<p>关于debian下编译打包参考<a href="https://moeclub.org/2017/03/31/100/?spm=38.1" target="_blank" rel="noopener">这里</a><br>这里列下简单步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir YourPackage</span><br><span class="line">cd YourPackage</span><br><span class="line">apt source -t bionic iproute2</span><br><span class="line">apt build-dep -y -t bionic iproute2</span><br><span class="line">vim lib&#x2F;bpf.c  &#x3D;&#x3D;&gt; modify the source code</span><br><span class="line">dpkg-buildpackge --commit</span><br><span class="line">dpkg-buildpackge </span><br><span class="line">dpkg -i ..&#x2F;iproute2*.deb</span><br></pre></td></tr></table></figure>

<p>这时例子程序可以成功运行了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make test</span><br></pre></td></tr></table></figure>

<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ol>
<li><a href="https://blogs.oracle.com/linux/notes-on-bpf-4" target="_blank" rel="noopener">How to build bpf program out of the kernel tree</a></li>
</ol>
]]></content>
      <categories>
        <category>kernel</category>
      </categories>
      <tags>
        <tag>bpf</tag>
      </tags>
  </entry>
  <entry>
    <title>copy_file_range problem</title>
    <url>/2020/01/20/copy-file-range-problem/</url>
    <content><![CDATA[<h1 id="copy-file-range问题"><a href="#copy-file-range问题" class="headerlink" title="copy_file_range问题"></a>copy_file_range问题</h1><p>在使用3.10内核的过程中遇到一个关于copy_file_range的问题，<strong>拷贝后数据不对</strong>。有必要对这个系统调用分析一下。</p>
<h1 id="copy-file-range"><a href="#copy-file-range" class="headerlink" title="copy_file_range"></a>copy_file_range</h1><p><strong>copy_file_range</strong>是最近新增的[2]syscall，在不需要内核和用户态缓存间的拷贝就可以高效实现文件间的拷贝。传统的文件拷贝流程涉及内核page cache到用户缓存，然后由用户缓存再拷贝到内核page cache，中间涉及两次拷贝，效率不高。copy_file_range正是对拷贝的优化，内部实现是通过pipe buffer的结构，在读取源文件时把涉及到的page cache内存页，页内offset，长度信息，保存到pipe buffer中，在向目标文件拷贝时直接读取pipe buffer信息，执行后续写操作，这样仅需要一次拷贝就完成了。</p>
<p>copy_file_range的流程图如下<br><img src="/2020/01/20/copy-file-range-problem/copy_file_range_ext4.png" alt="copy_file_range flow chart"><br>可以看到最终调用pipe_to_file。下面看下该函数的实现。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe_to_file</span><span class="params">(struct pipe_inode_info *pipe, struct pipe_buffer *buf,</span></span></span><br><span class="line"><span class="function"><span class="params">struct splice_desc *sd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span> = <span class="title">sd</span>-&gt;<span class="title">u</span>.<span class="title">file</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> *<span class="title">mapping</span> = <span class="title">file</span>-&gt;<span class="title">f_mapping</span>;</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> offset, this_len;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">page</span>;</span></span><br><span class="line">	<span class="keyword">void</span> *fsdata;</span><br><span class="line">	<span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">	offset = sd-&gt;pos &amp; ~PAGE_CACHE_MASK;</span><br><span class="line"></span><br><span class="line">	this_len = sd-&gt;len;</span><br><span class="line">	<span class="keyword">if</span> (this_len + offset &gt; PAGE_CACHE_SIZE)</span><br><span class="line">		this_len = PAGE_CACHE_SIZE - offset;</span><br><span class="line"></span><br><span class="line">	ret = pagecache_write_begin(file, mapping, sd-&gt;pos, this_len,</span><br><span class="line">	AOP_FLAG_UNINTERRUPTIBLE, &amp;page, &amp;fsdata);</span><br><span class="line">	<span class="keyword">if</span> (unlikely(ret))</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (buf-&gt;page != page) &#123;</span><br><span class="line">		<span class="keyword">char</span> *src = buf-&gt;ops-&gt;<span class="built_in">map</span>(pipe, buf, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">char</span> *dst = kmap_atomic(page);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memcpy</span>(dst + offset, src + buf-&gt;offset, this_len);</span><br><span class="line">		flush_dcache_page(page);</span><br><span class="line">		kunmap_atomic(dst);</span><br><span class="line">		buf-&gt;ops-&gt;unmap(pipe, buf, src);</span><br><span class="line">	&#125;</span><br><span class="line">	ret = pagecache_write_end(file, mapping, sd-&gt;pos, this_len, this_len,</span><br><span class="line">		page, fsdata);</span><br><span class="line">out:</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面第22行判断如果不是同一page时才会执行数据拷贝操作，如果是同一page，则不执行数据操作。这样copy_file_range就不适用同一文件中拷贝。如果执行copy_file_range测试指定的是同一文件，在源偏移和目标偏移很小，即小于一个page大小时，pipe_to_file就不执行数据操作，从而导致拷贝数据不一致。</p>
<p>内核upstream上的处理流程如下图:<br><img src="/2020/01/20/copy-file-range-problem/copy_file_range_ext4_latest.png" alt="cop_file_range"></p>
<blockquote>
<p>最新版的内核已经抛弃对pipe_to_file的调用，该函数也已经从内核移除。最终的实现调用的是iov_iter_copy_from_user_atomic负责完成数据操作。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">size_t iov_iter_copy_from_user_atomic(struct page *page,</span><br><span class="line">struct iov_iter *i, unsigned long offset, size_t bytes)</span><br><span class="line">&#123;</span><br><span class="line">	char *kaddr &#x3D; kmap_atomic(page), *p &#x3D; kaddr + offset;</span><br><span class="line">	if (unlikely(!page_copy_sane(page, offset, bytes))) &#123;</span><br><span class="line">		kunmap_atomic(kaddr);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	if (unlikely(iov_iter_is_pipe(i) || iov_iter_is_discard(i))) &#123;</span><br><span class="line">		kunmap_atomic(kaddr);</span><br><span class="line">		WARN_ON(1);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	iterate_all_kinds(i, bytes, v,</span><br><span class="line">		copyin((p +&#x3D; v.iov_len) - v.iov_len, v.iov_base, v.iov_len),</span><br><span class="line">		memcpy_from_page((p +&#x3D; v.bv_len) - v.bv_len, v.bv_page,v.bv_offset, v.bv_len),</span><br><span class="line">		memcpy((p +&#x3D; v.iov_len) - v.iov_len, v.iov_base, v.iov_len)</span><br><span class="line">	)</span><br><span class="line">	kunmap_atomic(kaddr);</span><br><span class="line">	return bytes;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(iov_iter_copy_from_user_atomic);</span><br></pre></td></tr></table></figure>
<p>iov_iter_copy_from_user_atomic的流程图:<br><img src="/2020/01/20/copy-file-range-problem/copy_file_range_iov_iter.png" alt="iov_iter_copy_from_user_atomic"></p>
<blockquote>
<p>iov_iter_copy_from_user_atomic函数并不关心源和目标page是否是同一page，他们之间是否会出现覆盖的情&gt;况，仅仅是执行数据操作。如果数据源和数据目标有覆盖则copy_file_range的结果是有问题的。</p>
</blockquote>
<p>数据覆盖的情况如下图:<br><img src="/2020/01/20/copy-file-range-problem/copy_file_range_overlap.png" alt="iov_iter_copy_from_user_atomic"></p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>在使用copy_file_range时一定要注意针对同一文件执行copy_file_range，结果有可能发生覆盖，导致结果并不是我们预期的。这个和memcpy一样，在有覆盖时结果时不可预期的。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://lwn.net/Articles/659523/" target="_blank" rel="noopener">copy_file_range()</a></li>
<li><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/read_write.c" target="_blank" rel="noopener">read_write.c</a></li>
</ol>
]]></content>
      <categories>
        <category>ext4</category>
      </categories>
      <tags>
        <tag>fs</tag>
        <tag>ext4</tag>
        <tag>copy_file_range</tag>
      </tags>
  </entry>
  <entry>
    <title>about-dwarf</title>
    <url>/2020/01/20/about-dwarf/</url>
    <content><![CDATA[<h1 id="关于dwarf"><a href="#关于dwarf" class="headerlink" title="关于dwarf"></a>关于dwarf</h1><p>一种调试文件格式，用于支持源码级调试功能。它通过树结构描述一个程序，每个节点有子节点或兄弟节点。节点可以表示<strong>类型</strong>、<strong>变量</strong>、或<strong>函数</strong>。<br>dwarf使用一系列的DIE(debugging information entries)表示源程序。每个<strong>DIE</strong>包含一个tag标签标识和一系列属性。每个或多个DIE组成一组标识程序中某个实体，或是程序或者变量等等。</p>
<h1 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h1><p>readelf –debug-dump=info vmlinux</p>
<blockquote>
<p>输出.debug_info段中调试信息</p>
</blockquote>
<p>下面举个例子。<br><code>readelf --debug-dump=info vmlinux | grep dentry_open</code></p>
<p>通过上面的命令可以得到如下信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">89773762- &lt;1&gt;&lt;aa9c983&gt;: Abbrev Number: 57 (DW_TAG_subprogram)</span><br><span class="line">89773763-    &lt;aa9c984&gt;   DW_AT_external    : 1</span><br><span class="line">89773764-    &lt;aa9c984&gt;   DW_AT_declaration : 1</span><br><span class="line">89773765:    &lt;aa9c984&gt;   DW_AT_linkage_name: (indirect string, offset: 0x105b80): dentry_open</span><br><span class="line">89773766:    &lt;aa9c988&gt;   DW_AT_name        : (indirect string, offset: 0x105b80): dentry_open</span><br><span class="line">89773767-    &lt;aa9c98c&gt;   DW_AT_decl_file   : 55</span><br><span class="line">89773768-    &lt;aa9c98d&gt;   DW_AT_decl_line   : 2493</span><br><span class="line">89773769-    &lt;aa9c98f&gt;   DW_AT_decl_column : 22</span><br></pre></td></tr></table></figure>
<p>dentry_open是一个函数，在2493行被声明的。<br>可以用readelf查看各种信息。<br>在后面的参考中，[2]有对dwarf的详细介绍。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://developer.ibm.com/technologies/systems/articles/au-dwarf-debug-format/" target="_blank" rel="noopener">Exploring the DWARF debug format information</a></li>
<li><a href="http://people.redhat.com/jkratoch/DeveloperConference2011-debug.pdf" target="_blank" rel="noopener">Debugging Tools Intro DWARF,ELF,GDB,build-id</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>非对称加密算法和签名</title>
    <url>/2020/01/20/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%92%8C%E7%AD%BE%E5%90%8D/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近有个需求是关于签名，这里借此对非对称加密和签名机制了解一下。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>RSA是一种重要的非对称加密算法，应用非常广泛。</p>
<p>关于RSA的介绍可以参考<a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">wiki</a>。</p>
<p>RSA算法基于大素数整数无法执行因子分解的，目前推荐的长度至少1024。</p>
<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>这里以简单的示意图说明：</p>
<p><img src="/2020/01/20/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%92%8C%E7%AD%BE%E5%90%8D/%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86.png" alt="非对称加密示意"></p>
<h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><p><img src="/2020/01/20/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%92%8C%E7%AD%BE%E5%90%8D/%E5%85%AC%E9%92%A5%E7%AD%BE%E5%90%8D.png" alt="签名示意"></p>
<p>如果遇到中间人攻击修改了消息内容，Bob对消息执行md5/sha1/sha256时得到的digist和解密得到的digist不同，从而知道消息被篡改。</p>
<h2 id="openssl应用"><a href="#openssl应用" class="headerlink" title="openssl应用"></a>openssl应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out my.key 1024</span><br></pre></td></tr></table></figure>
<p>以上生成rsa私钥文件，注意这里时私钥文件，并不是说rsa私钥。rsa私钥文件有自己的格式，从里边内容可以推导出rsa私钥和rsa公钥。<br>关于rsa私钥文件格式参考<a href="https://www.shangyang.me/2017/05/24/encrypt-rsa-keyformat/" target="_blank" rel="noopener">这里</a>。</p>
<h2 id="使用openssl的python接口编程"><a href="#使用openssl的python接口编程" class="headerlink" title="使用openssl的python接口编程"></a>使用openssl的python接口编程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Certificate generation module.</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">from OpenSSL import crypto</span><br><span class="line"></span><br><span class="line">TYPE_RSA &#x3D; crypto.TYPE_RSA</span><br><span class="line">TYPE_DSA &#x3D; crypto.TYPE_DSA</span><br><span class="line"></span><br><span class="line">def createKeyPair(type, bits):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Create a public&#x2F;private key pair.</span><br><span class="line">    Arguments: type - Key type, must be one of TYPE_RSA and TYPE_DSA</span><br><span class="line">               bits - Number of bits to use in the key</span><br><span class="line">    Returns:   The public&#x2F;private key pair in a PKey object</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    pkey &#x3D; crypto.PKey()</span><br><span class="line">    pkey.generate_key(type, bits)</span><br><span class="line">    return pkey</span><br><span class="line"></span><br><span class="line">def createCertRequest(pkey, digest&#x3D;&quot;md5&quot;, **name):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Create a certificate request.</span><br><span class="line">    Arguments: pkey   - The key to associate with the request</span><br><span class="line">               digest - Digestion method to use for signing, default is md5</span><br><span class="line">               **name - The name of the subject of the request, possible</span><br><span class="line">                        arguments are:</span><br><span class="line">                          C     - Country name</span><br><span class="line">                          ST    - State or province name</span><br><span class="line">                          L     - Locality name</span><br><span class="line">                          O     - Organization name</span><br><span class="line">                          OU    - Organizational unit name</span><br><span class="line">                          CN    - Common name</span><br><span class="line">                          emailAddress - E-mail address</span><br><span class="line">    Returns:   The certificate request in an X509Req object</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    req &#x3D; crypto.X509Req()</span><br><span class="line">    subj &#x3D; req.get_subject()</span><br><span class="line"></span><br><span class="line">    for (key,value) in name.items():</span><br><span class="line">        setattr(subj, key, value)</span><br><span class="line"></span><br><span class="line">    req.set_pubkey(pkey)</span><br><span class="line">    req.sign(pkey, digest)</span><br><span class="line">    return req</span><br><span class="line"></span><br><span class="line">def createCertificate(req, (issuerCert, issuerKey), serial, (notBefore, notAfter), digest&#x3D;&quot;md5&quot;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Generate a certificate given a certificate request.</span><br><span class="line">    Arguments: req        - Certificate reqeust to use</span><br><span class="line">               issuerCert - The certificate of the issuer</span><br><span class="line">               issuerKey  - The private key of the issuer</span><br><span class="line">               serial     - Serial number for the certificate</span><br><span class="line">               notBefore  - Timestamp (relative to now) when the certificate</span><br><span class="line">                            starts being valid</span><br><span class="line">               notAfter   - Timestamp (relative to now) when the certificate</span><br><span class="line">                            stops being valid</span><br><span class="line">               digest     - Digest method to use for signing, default is md5</span><br><span class="line">    Returns:   The signed certificate in an X509 object</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    cert &#x3D; crypto.X509()</span><br><span class="line">    cert.set_serial_number(serial)</span><br><span class="line">    cert.gmtime_adj_notBefore(notBefore)</span><br><span class="line">    cert.gmtime_adj_notAfter(notAfter)</span><br><span class="line">    cert.set_issuer(issuerCert.get_subject())</span><br><span class="line">    cert.set_subject(req.get_subject())</span><br><span class="line">    cert.set_pubkey(req.get_pubkey())</span><br><span class="line">    cert.sign(issuerKey, digest)</span><br><span class="line">	return cert</span><br><span class="line"></span><br><span class="line">cakey &#x3D; createKeyPair(TYPE_RSA, 1024)</span><br><span class="line">careq &#x3D; createCertRequest(cakey, CN&#x3D;&#39;Certificate Authority&#39;)</span><br><span class="line">cacert &#x3D; createCertificate(careq, (careq, cakey), 0, (0, 60*60*24*365*5)) # five years</span><br><span class="line">open(&#39;simple&#x2F;CA.pkey&#39;, &#39;w&#39;).write(crypto.dump_privatekey(crypto.FILETYPE_PEM, cakey))</span><br><span class="line">open(&#39;simple&#x2F;CA.cert&#39;, &#39;w&#39;).write(crypto.dump_certificate(crypto.FILETYPE_PEM, cacert))</span><br><span class="line">for (fname, cname) in [(&#39;client&#39;, &#39;Simple Client&#39;), (&#39;server&#39;, &#39;Simple Server&#39;)]:</span><br><span class="line">    pkey &#x3D; createKeyPair(TYPE_RSA, 1024)</span><br><span class="line">    req &#x3D; createCertRequest(pkey, CN&#x3D;cname)</span><br><span class="line">    cert &#x3D; createCertificate(req, (cacert, cakey), 1, (0, 60*60*24*365*5)) # five years</span><br><span class="line">    open(&#39;simple&#x2F;%s.pkey&#39; % (fname,), &#39;w&#39;).write(crypto.dump_privatekey(crypto.FILETYPE_PEM, pkey))</span><br><span class="line">    open(&#39;simple&#x2F;%s.cert&#39; % (fname,), &#39;w&#39;).write(crypto.dump_certificate(crypto.FILETYPE_PEM, cert))</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对签名的简单理解：</p>
<ol>
<li><p>关于自签名证书，使用自己的私钥对证书签名。证书有很多内容，如有效期和commonName。</p>
</li>
<li><p>正常使用是通过可信的第三方CA机构签发证书，然后把私钥文件和证书文件发给客户。</p>
</li>
<li><p>注意私钥文件可以推导出公钥和私钥信息。证书文件中包含公钥信息，通过得到公钥信息就可以和客户安全通信。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>签名</tag>
      </tags>
  </entry>
  <entry>
    <title>关于chacl的分析</title>
    <url>/2020/01/13/%E5%85%B3%E4%BA%8Echacl%E7%9A%84%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="关于chacl的分析"><a href="#关于chacl的分析" class="headerlink" title="关于chacl的分析"></a>关于chacl的分析</h2><p>最近在nfs上面遇到chacl问题，这里记录下分析过程。</p>
<h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>ls命令根据系统调用getxattr的返回值判断是否要打印”+”</p>
<p><a href="https://github.com/coreutils/coreutils/blob/master/src/ls.c" target="_blank" rel="noopener">https://github.com/coreutils/coreutils/blob/master/src/ls.c</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">			  </span><br><span class="line">  if (! any_has_acl)</span><br><span class="line">    modebuf[10] &#x3D; &#39;\0&#39;;</span><br><span class="line">  else if (f-&gt;acl_type &#x3D;&#x3D; ACL_T_LSM_CONTEXT_ONLY)</span><br><span class="line">    modebuf[10] &#x3D; &#39;.&#39;;</span><br><span class="line">  else if (f-&gt;acl_type &#x3D;&#x3D; ACL_T_YES)</span><br><span class="line">    modebuf[10] &#x3D; &#39;+&#39;; &#x2F;&#x2F; 有acl数据则打印&quot;+&quot;</span><br><span class="line">&#96;&#96;&#96;	</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;coreutils&#x2F;gnulib&#x2F;blob&#x2F;master&#x2F;lib&#x2F;file-has-acl.c</span><br></pre></td></tr></table></figure>
<p>int file_has_acl (char const *name, struct stat const *sb)<br>{<br>#if USE_ACL<br>  if (! S_ISLNK (sb-&gt;st_mode))<br>    {</p>
<h1 id="if-GETXATTR-WITH-POSIX-ACLS"><a href="#if-GETXATTR-WITH-POSIX-ACLS" class="headerlink" title="if GETXATTR_WITH_POSIX_ACLS"></a>if GETXATTR_WITH_POSIX_ACLS</h1><pre><code>  ssize_t ret;

  ret = getxattr (name, XATTR_NAME_POSIX_ACL_ACCESS, NULL, 0); //是否有acl数据
  if (ret &lt; 0 &amp;&amp; errno == ENODATA)
    ret = 0;
  else if (ret &gt; 0)
    return 1;

  if (ret == 0 &amp;&amp; S_ISDIR (sb-&gt;st_mode))
    {
      ret = getxattr (name, XATTR_NAME_POSIX_ACL_DEFAULT, NULL, 0);
      if (ret &lt; 0 &amp;&amp; errno == ENODATA)
        ret = 0;
      else if (ret &gt; 0)
        return 1;
    }

  if (ret &lt; 0)
    return - acl_errno_valid (errno);
  return ret;
...</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 3.10内核中getxattr</span><br><span class="line"></span><br><span class="line">chacl会调用getxattr。</span><br></pre></td></tr></table></figure>
<p>getxattr<br>  - vfs_getxattr<br>         - nfs3_getxattr</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">nfs3_getxattr@fs&#x2F;nfs&#x2F;nfs3acl.c</span><br></pre></td></tr></table></figure>
<p>acl = nfs3_proc_getacl(inode, type);<br>if (IS_ERR(acl))<br>    return PTR_ERR(acl);<br>else if (acl) {<br>    if (type == ACL_TYPE_ACCESS &amp;&amp; acl-&gt;a_count == 0)<br>        error = -ENODATA;<br>    else<br>        error = posix_acl_to_xattr(&amp;init_user_ns, acl, buffer, size);<br>    posix_acl_release(acl);<br>} else<br>    error = -ENODATA;//如果nfs3_proc_getacl返回null则返回ENODATA</p>
<p>nfs3_proc_getacl@fs/nfs/nfs3acl.c</p>
<p>if (res.acl_access != NULL) {<br>        if (posix_acl_equiv_mode(res.acl_access, NULL) == 0) {//对于标准权限则置空acl<br>                posix_acl_release(res.acl_access);<br>                res.acl_access = NULL;<br>        }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">nfs3_getxattr对于标准权限总是返回ENODATA，所以ls时不会出现&quot;+&quot;。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4.18内核getxattr</span><br></pre></td></tr></table></figure>
<p>getxattr<br> - vfs_getxattr<br>       - posix_acl_xattr_get</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">posix_acl_xattr_get@fs&#x2F;posix_acl.c</span><br></pre></td></tr></table></figure>
<p>acl = get_acl(inode, handler-&gt;flags);<br>if (IS_ERR(acl))<br>        return PTR_ERR(acl);<br>if (acl == NULL)<br>        return -ENODATA;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get_acl@fs&#x2F;posix_acl.c</span><br></pre></td></tr></table></figure>
<p>acl = get_cached_acl(inode, type);<br>if (!is_uncached_acl(acl))<br>        return acl;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">				</span><br><span class="line">如果inode-&gt;i_acl inode-&gt;i_default_acl有效则使用它,</span><br><span class="line">否则执行nfs3_get_acl，nfs3_get_acl对于标准权限总是返回NULL，从而getxattr返回ENODATA.</span><br><span class="line"></span><br><span class="line">nfs3_get_acl@fs&#x2F;nfs&#x2F;nfs3acl.c</span><br></pre></td></tr></table></figure>
<p>if (res.acl_access != NULL) {<br>        if ((posix_acl_equiv_mode(res.acl_access, NULL) == 0) ||<br>            res.acl_access-&gt;a_count == 0) {<br>                posix_acl_release(res.acl_access);<br>                res.acl_access = NULL;<br>        }<br>}</p>
<p>```</p>
<p>在chacl之后如果inode-&gt;i_acl有效,getxattr返回acl数据。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>出现问题的根本原因是4.18内核使用generic acl功能框架，缓存了错误的acl，导致出问题。</p>
<p>最新的内核有<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/fs/nfs/nfs3acl.c?h=v5.4&id=ded52fbe7020a5696b0b0a0fdbf234e37bf16f94" target="_blank" rel="noopener">patch</a>修正该问题。<br>即在setacl的时候总是置inode-&gt;i_acl无效。</p>
]]></content>
      <categories>
        <category>kernel</category>
        <category>nfs</category>
      </categories>
      <tags>
        <tag>acl</tag>
        <tag>NFS</tag>
      </tags>
  </entry>
  <entry>
    <title>NAND Flash接口介绍</title>
    <url>/2020/01/10/NAND%20Flash%E6%8E%A5%E5%8F%A3%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="NAND-Flash接口介绍"><a href="#NAND-Flash接口介绍" class="headerlink" title="NAND Flash接口介绍"></a>NAND Flash接口介绍</h2><p>Nand Flash以廉价，高密度得到了广泛应用，这里介绍下Nand相关接口。目前<br>Nand Flash有两类接口，一类是三星和东芝主导的Toggle NAND接口，一类是其它<br>Flash厂商包括Cypress主导的ONFI接口。</p>
<ol>
<li><p>traditional NAND interface<br>15 pins with 8 data bus and other control signals</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DQ[7:0] Bidirectional, 8 bits data bus</span><br><span class="line">CE# input 片选信号</span><br><span class="line">ALE input</span><br><span class="line">CLE input</span><br><span class="line">RE# input</span><br><span class="line">WE# input</span><br><span class="line">WP# input</span><br><span class="line">RY&#x2F;BY# output 通知控制器操作完成或者空闲</span><br></pre></td></tr></table></figure>
<p> 没有时钟信号，该接口是异步接口<br> 最高速率达40Mbps</p>
</li>
<li><p>ONFI NAND v1.0 interface<br> add addtional pins for more functions</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IO[7:0]  Bidirectional, 8 bits data bus(Mandatory)</span><br><span class="line">IO[15:8] Bidirectional, upper 8 bits data bus(Optional)</span><br><span class="line">IO2[7:0] Bidirectional, second 8 bits data bus(Optional) </span><br><span class="line">CE#[3:0] input 支持4个片选</span><br><span class="line">ALE[1:0] input</span><br><span class="line">CLE[1:0] input</span><br><span class="line">RE#[1:0] input</span><br><span class="line">WE#[1:0] input</span><br><span class="line">WP#[1:0] input</span><br><span class="line">RY&#x2F;BY#[3:0] output</span><br></pre></td></tr></table></figure>
<p> 支持两个8位数据接口或者一个16位数据接口<br> 最高速率达50Mbps</p>
</li>
<li><p>Toggle NAND 1.0(Asynchronous DDR NAND Interface)<br> performance and throughout<br> Added DQS signals<br> no clock<br> DQS在上升或者下降沿进行数据传输，类似DDR的方式，提高数据传输率。<br> 最高速率达133Mbps</p>
</li>
<li><p>ONFI NAND v2.0 interface<br> 增加时钟信号，支持异步接口保持向后兼容，也可以使用时钟信号支持同步接口<br> 最高速率达133Mbps</p>
</li>
<li><p>Toggle NAND 2.0<br>采用差分信号和ODT提高数据传输率和信号质量<br>最高速率达400Mbps</p>
</li>
<li><p>ONFINAND3.x和4.x接口<br>采用差分信号和ODT提高数据传输率和信号质量<br>最高速率达400Mbps</p>
</li>
<li><p>SPI Nand Flash接口<br>低功耗，接口简单</p>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.embedded.com/flash-101-the-nand-flash-electrical-interface/" target="_blank" rel="noopener">reference</a></li>
</ol>
]]></content>
      <categories>
        <category>NAND</category>
      </categories>
      <tags>
        <tag>NAND Flash</tag>
        <tag>ONFI</tag>
        <tag>Toggle Nand</tag>
      </tags>
  </entry>
  <entry>
    <title>x86_64上安装aarch64架构的centos发行版</title>
    <url>/2019/08/01/x86_64%E4%B8%8A%E5%AE%89%E8%A3%85aarch64%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="host上编译安装qemu"><a href="#host上编译安装qemu" class="headerlink" title="host上编译安装qemu"></a>host上编译安装qemu</h2><ul>
<li><p>host: centos 8.0 x86_64</p>
</li>
<li><p>下载qemu-4.0.0.tar.gz<br><a href="https://download.qemu.org/" target="_blank" rel="noopener">https://download.qemu.org/</a></p>
</li>
<li><p>编译qemu</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --target-list&#x3D;aarch64-softmmu</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在编译qemu需要安装glibc和glib2的等开发包，请安装相应的开发包。</p>
</blockquote>
<h2 id="下载-UEFI-firmware"><a href="#下载-UEFI-firmware" class="headerlink" title="下载 UEFI firmware"></a>下载 UEFI firmware</h2><ul>
<li>uefi地址<br><a href="http://mirror.centos.org/centos/8/AppStream/aarch64/os/Packages/edk2-aarch64-20190308git89910a39dcfd-6.el8.noarch.rpm" target="_blank" rel="noopener">http://mirror.centos.org/centos/8/AppStream/aarch64/os/Packages/edk2-aarch64-20190308git89910a39dcfd-6.el8.noarch.rpm</a></li>
</ul>
<blockquote>
<p>我们需要支持aarch64的UEFI固件，上面的rpm在x86_64上无法直接安装，可以通过下面的命令获取UEFI固件。</p>
</blockquote>
<ul>
<li>解压uefi固件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ rpm2cpio edk2-aarch64-20190308git89910a39dcfd-6.el8.noarch.rpm | cpio -div </span><br><span class="line">$ tree usr</span><br><span class="line">usr</span><br><span class="line">└── share</span><br><span class="line">    ├── AAVMF</span><br><span class="line">    │   ├── AAVMF_CODE.fd -&gt; ..&#x2F;edk2&#x2F;aarch64&#x2F;QEMU_EFI-silent-pflash.raw</span><br><span class="line">    │   ├── AAVMF_CODE.verbose.fd -&gt; ..&#x2F;edk2&#x2F;aarch64&#x2F;QEMU_EFI-pflash.raw</span><br><span class="line">    │   └── AAVMF_VARS.fd -&gt; ..&#x2F;edk2&#x2F;aarch64&#x2F;vars-template-pflash.raw</span><br><span class="line">    ├── edk2</span><br><span class="line">    │   └── aarch64</span><br><span class="line">    │       ├── QEMU_EFI.fd</span><br><span class="line">    │       ├── QEMU_EFI-pflash.raw</span><br><span class="line">    │       ├── QEMU_EFI.silent.fd</span><br><span class="line">    │       ├── QEMU_EFI-silent-pflash.raw</span><br><span class="line">    │       ├── QEMU_VARS.fd</span><br><span class="line">    │       └── vars-template-pflash.raw</span><br><span class="line">    ├── licenses</span><br><span class="line">    │   └── edk2-aarch64</span><br><span class="line">    │       ├── License.edk2.txt</span><br><span class="line">    │       ├── LICENSE.openssl</span><br><span class="line">    │       └── License.txt</span><br><span class="line">    └── qemu</span><br><span class="line">        └── firmware</span><br><span class="line">            ├── 60-edk2-aarch64.json</span><br><span class="line">            └── 70-edk2-aarch64-verbose.json</span><br><span class="line"></span><br><span class="line">8 directories, 14 files</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用上面解压出来的UEFI固件:QEMU_EFI.fd</p>
</blockquote>
<h2 id="运行虚拟机-安装centos发行版"><a href="#运行虚拟机-安装centos发行版" class="headerlink" title="运行虚拟机 安装centos发行版"></a>运行虚拟机 安装centos发行版</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qemu-system-aarch64 -m 4096 -cpu cortex-a57 -smp 2 -M virt -bios QEMU_EFI.fd -nographic -drive if&#x3D;none,file&#x3D;CentOS-7-aarch64-Everything-1908.iso,id&#x3D;cdrom,media&#x3D;cdrom -device virtio-scsi-device -device scsi-cd,drive&#x3D;cdrom -drive if&#x3D;none,file&#x3D;centos-aarch64.img,id&#x3D;hd0 -device virtio-blk-device,drive&#x3D;hd0</span><br></pre></td></tr></table></figure>

<ul>
<li>上面的命令没有给VM配置网络接口，仅仅用来安装操作系统！！</li>
<li>centos的安装完全是基于命令行界面的，按照提示安装就可以了</li>
</ul>
<h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><p>网络参照<a href="https://wzt.ac.cn/2019/09/10/QEMU-networking/" target="_blank" rel="noopener">这个文档</a>，配置tap接口给aarch64虚拟机使用。</p>
<ul>
<li><p>配置接口<br>如果由brctl命令则使用brctl命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brctl addbr br0</span><br><span class="line">ifconfig br0 up</span><br><span class="line">tunctl -t tap0 -u root              # 创建一个 tap0 接口，只允许 root 用户访问</span><br><span class="line">brctl addif br0 tap0                # 在虚拟网桥中增加一个 tap0 接口</span><br><span class="line">ifconfig tap0 0.0.0.0 promisc up    # 启用 tap0 接口</span><br></pre></td></tr></table></figure>
<p>如果没有brctl命令，可以使用ip命令代替。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip tuntap add tap0 mode tap</span><br><span class="line">ip link set dev tap0 up</span><br><span class="line">ip link add br0 type bridge</span><br><span class="line">ip link set tap0 master br0</span><br><span class="line">ip link set eth0 master br0</span><br></pre></td></tr></table></figure>
</li>
<li><p>VM使用网络接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-net nic -net tap,ifname&#x3D;tap0,script&#x3D;no,downscript&#x3D;no</span><br></pre></td></tr></table></figure>
<p>使用上面的参数让qemu使用tap接口作为vm的网络接口。<br>完整的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qemu-system-aarch64 -m 4096 -cpu cortex-a57 -smp 4 -M virt -bios QEMU_EFI.fd -nographic -drive if&#x3D;none,file&#x3D;centos-aarch64.img,id&#x3D;hd0 -device virtio-blk-device,drive&#x3D;hd0 -drive if&#x3D;none,file&#x3D;CentOS-7-aarch64-Everything-1908.iso,id&#x3D;cdrom,media&#x3D;cdrom -device virtio-scsi-device -device scsi-cd,drive&#x3D;cdrom -net nic -net tap,ifname&#x3D;tap0,script&#x3D;no,downscript&#x3D;no</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>-boot c参数指定硬盘启动无效，原因不明，规避方法是启动中按esc进入UEFI的bootmgr选择硬盘启动。</p>
</blockquote>
<h2 id="配置ssh访问"><a href="#配置ssh访问" class="headerlink" title="配置ssh访问"></a>配置ssh访问</h2><p>登录aarch64 centos后，设置网络接口。这里VM使用的tap接口时桥接到外部网络的，配置地址后就可以访问。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>安装aarch64的centos后，登录发现虚拟机效率很低。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;cpuinfo</span><br><span class="line">processor       : 0</span><br><span class="line">BogoMIPS        : 125.00</span><br><span class="line">Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x1</span><br><span class="line">CPU part        : 0xd07</span><br><span class="line">CPU revision    : 0</span><br></pre></td></tr></table></figure>

<p>这里可见模拟cpu的<a href="https://zh.wikipedia.org/wiki/BogoMips" target="_blank" rel="noopener">BogoMIPS</a>为125，即每秒125M指令，实际CPU的主频在250M左右。<br>host上cpu主频在2.2G，执行效率仅为<strong>10%</strong>，有着<strong>90%</strong>的性能损失。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://marcin.juszkiewicz.com.pl/2015/04/17/running-vms-on-fedoraaarch64/" target="_blank" rel="noopener">Running VMs on Fedora/AArch64</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/linuxxl/p/11658387.html" target="_blank" rel="noopener">x86 平台安装arm虚拟机</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>aarch64</tag>
      </tags>
  </entry>
  <entry>
    <title>udplite checksum problem</title>
    <url>/2019/07/16/udplite-checksum-problem/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在linux 3.10.0上面，遇到一个udplite校验失败问题。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>udp报文格式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MAC|IP|UDP|Payload</span><br></pre></td></tr></table></figure>

<p>而如下的udplite报文被drop了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MAC|IP|UDP|Payload</span><br><span class="line">14  20  8   61</span><br><span class="line"></span><br><span class="line">udplite_rcv</span><br><span class="line">-&gt;__udp4_lib_rcv</span><br><span class="line">-&gt;udp4_csum_init</span><br><span class="line">-&gt;udplite_checksum_init</span><br><span class="line">-&gt;skb_checksum_init_zero_check</span><br><span class="line">  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~    报bad checksum</span><br></pre></td></tr></table></figure>

<p>在udplite_checksum_init的开始处:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">skb-&gt;len &#x3D; 61 + 8 &#x3D;69</span><br><span class="line">udphdr-&gt;len &#x3D; 64</span><br></pre></td></tr></table></figure>
<p>UDPLITE协议中，udphdr中len表示对报文多少进行了校验。<br>即UDP_SKB_CB(skb)-&gt;partial_cov=1</p>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>udplite</tag>
        <tag>checksum</tag>
      </tags>
  </entry>
  <entry>
    <title>松散源路由发包失败问题</title>
    <url>/2019/06/20/%E6%9D%BE%E6%95%A3%E6%BA%90%E8%B7%AF%E7%94%B1%E5%8F%91%E5%8C%85%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>近期遇到松散源路由报文通信失败，通过systemtap可以很快定位报文丢弃在何处。</p>
<p>直接上探测脚本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">probe begin()</span><br><span class="line">&#123;</span><br><span class="line">  print(&quot;Begin probe..\n&quot;)</span><br><span class="line">&#125;</span><br><span class="line">probe end()</span><br><span class="line">&#123;</span><br><span class="line">  print(&quot;End probe.\n&quot;)</span><br><span class="line">&#125;</span><br><span class="line">probe kernel.function(&quot;icmp_echo&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  print_backtrace()&#x2F;&#x2F;调用栈回溯</span><br><span class="line">  printf(&quot;%s\n&quot;,pp())&#x2F;&#x2F;调用点</span><br><span class="line">&#125;</span><br><span class="line">probe kernel.statement(&quot;*@net&#x2F;ipv4&#x2F;ip_input.c:341&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;%s\n&quot;,pp())</span><br><span class="line">&#125;</span><br><span class="line">probe kernel.function(&quot;ip_options_compile&quot;).return</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;ip_options_compile return:%d\n&quot;,$return)</span><br><span class="line">&#125;</span><br><span class="line">probe timer.ms(10000)</span><br><span class="line">&#123;</span><br><span class="line">  exit()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在报文路径上增加探测点直接定位出丢包位置。</p>
</blockquote>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这个具体问题是在函数static inline bool ip_rcv_options(struct sk_buff *skb)中如果源路由未打开则直接drop。</p>
<p>打开内核中源路由选项，通信正常。</p>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>松散源路由</tag>
        <tag>source route</tag>
      </tags>
  </entry>
  <entry>
    <title>x86_64 calling conventions</title>
    <url>/2019/06/10/x86_64%20calling%20conversion/</url>
    <content><![CDATA[<p>在分析异常调用栈需要了解参数传递细节，在这里整理一下x86_64调用约定。</p>
<h2 id="通过函数的汇编语句分析调用约定"><a href="#通过函数的汇编语句分析调用约定" class="headerlink" title="通过函数的汇编语句分析调用约定"></a>通过函数的汇编语句分析调用约定</h2><h3 id="栈帧布局"><a href="#栈帧布局" class="headerlink" title="栈帧布局"></a>栈帧布局</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text</span><br><span class="line"> foo:</span><br><span class="line">     push %rbp</span><br><span class="line">     mov %rsp,%rbp</span><br><span class="line">     …</span><br><span class="line"> [retaddr][old rbp]</span><br><span class="line">                  ^</span><br><span class="line">                  |</span><br><span class="line">                rbp&#x2F;rsp</span><br><span class="line"> 8(%rbp): return address</span><br><span class="line"> 0(%rbp): old %rbp</span><br></pre></td></tr></table></figure>

<p>上面是foo函数的汇编语句，在函数入口处，%rsp指向返回地址，重新设置%rbp指向当前栈帧。</p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foo:</span><br><span class="line">     push %rbp</span><br><span class="line">     mov %rsp,%rbp</span><br><span class="line">     sub $16,%rsp # local var spaces</span><br><span class="line">     …</span><br><span class="line"> [retaddr][old rbp][local vars]</span><br><span class="line">high addr         ^           ^ low addr</span><br><span class="line">                  |           |</span><br><span class="line">                 rbp         rsp</span><br><span class="line"> -8(%rbp):local vars</span><br></pre></td></tr></table></figure>

<p>如果在栈上分配局部变量，通过%rbp访问。-8(%rbp)访问第一个局部变量，依次类推访问其它局部变量。</p>
<h3 id="返回地址"><a href="#返回地址" class="headerlink" title="返回地址"></a>返回地址</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foo:</span><br><span class="line">     push %rbp</span><br><span class="line">     mov %rsp,%rbp</span><br><span class="line">     sub $16,%rsp # local var spaces</span><br><span class="line">     ...</span><br><span class="line">     add $16,%rsp # balance stack</span><br><span class="line">     pop %rbp  # restore stack frame pointer</span><br><span class="line">     ret # return to caller</span><br><span class="line"> [retaddr][old rbp][local vars]</span><br><span class="line">                  ^           ^</span><br><span class="line">                  |           |</span><br><span class="line">                 rbp         rsp</span><br><span class="line"> -8(%rbp):local vars</span><br></pre></td></tr></table></figure>

<p>在使用完局部变量需要把对应栈空间释放，平衡堆栈，最后ret返回caller处。</p>
<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call conventions:</span><br><span class="line"> void foo(int a,int b,int c,int d,int e,int f,int g);</span><br><span class="line">   40053c:       6a 07                   pushq  $0x7      # seventh use stack</span><br><span class="line">   40053e:       41 b9 06 00 00 00       mov    $0x6,%r9d # sixth</span><br><span class="line">   400544:       41 b8 05 00 00 00       mov    $0x5,%r8d # fifth</span><br><span class="line">   40054a:       b9 04 00 00 00          mov    $0x4,%ecx # fouth</span><br><span class="line">   40054f:       ba 03 00 00 00          mov    $0x3,%edx # third</span><br><span class="line">   400554:       be 02 00 00 00          mov    $0x2,%esi # second para</span><br><span class="line">   400559:       bf 01 00 00 00          mov    $0x1,%edi # first para</span><br><span class="line"> %rdi -&gt;a</span><br><span class="line"> %rsi -&gt;b</span><br><span class="line"> %rdx -&gt;c</span><br><span class="line"> %rcx -&gt;d</span><br><span class="line"> %r8  -&gt;e</span><br><span class="line"> %r9  -&gt;f</span><br><span class="line"> [parameters][retaddr][old rbp]</span><br><span class="line">                              ^</span><br><span class="line">                              |</span><br><span class="line">                             rbp&#x2F;rsp    </span><br><span class="line"> 8(%rbp): return address</span><br><span class="line"> 16(%rbp): the seventh parameter</span><br><span class="line"> 24(%rbp): the eighth parameter</span><br></pre></td></tr></table></figure>

<p>前6个参数使用寄存器传递，如果还有额外参数则通过堆栈传递。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://en.wikipedia.org/wiki/X86_calling_conventions" target="_blank" rel="noopener">X86_calling_conventions</a></li>
<li><a href="https://aaronbloomfield.github.io/pdr/book/x86-64bit-ccc-chapter.pdf" target="_blank" rel="noopener">The 64 bit x86 C Calling Convention</a></li>
</ol>
]]></content>
      <categories>
        <category>调用约定</category>
      </categories>
      <tags>
        <tag>x86_64</tag>
        <tag>调用约定</tag>
      </tags>
  </entry>
  <entry>
    <title>sctp中一个bug</title>
    <url>/2019/06/04/sctp%E4%B8%AD%E4%B8%80%E4%B8%AAbug%E7%9A%84%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>syzkaller是Google团队开发的一款针对Linux内核进行模糊测试的开源工具,目前还在不断的维护之中。<br>订阅了相关linux内核的邮件列表后，会收到google的sykaller发现的内核bug的相关报告。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello,</span><br><span class="line"> syzbot found the following crash on:</span><br><span class="line"> HEAD commit:    9221dced Merge tag &#39;for-linus-20190601&#39; of git:&#x2F;&#x2F;git.kerne..</span><br><span class="line"> git tree:       upstream</span><br><span class="line"> console output: https:&#x2F;&#x2F;syzkaller.appspot.com&#x2F;x&#x2F;log.txt?x&#x3D;114cdc0ea00000</span><br><span class="line"> kernel config:  https:&#x2F;&#x2F;syzkaller.appspot.com&#x2F;x&#x2F;.config?x&#x3D;1fa7e451a5cac069</span><br><span class="line"> dashboard link: https:&#x2F;&#x2F;syzkaller.appspot.com&#x2F;bug?extid&#x3D;a9e23ea2aa21044c2798</span><br><span class="line"> compiler:       gcc (GCC) 9.0.0 20181231 (experimental)</span><br><span class="line"> userspace arch: i386</span><br><span class="line"> Unfortunately, I don&#39;t have any reproducer for this crash yet.</span><br><span class="line"> IMPORTANT: if you fix the bug, please add the following tag to the commit:</span><br><span class="line"> Reported-by: syzbot+a9e23ea2aa21044c2798@syzkaller.appspotmail.com</span><br><span class="line"> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> BUG: KASAN: slab-out-of-bounds in rt_cache_valid+0x158&#x2F;0x190</span><br><span class="line"> net&#x2F;ipv4&#x2F;route.c:1556</span><br><span class="line"> Read of size 2 at addr ffff8880654f3ac7 by task syz-executor.0&#x2F;26603</span><br><span class="line"> CPU: 0 PID: 26603 Comm: syz-executor.0 Not tainted 5.2.0-rc2+ #9 Hardware name: Google Google Compute Engine&#x2F;Google Compute Engine, BIOS Google 01&#x2F;01&#x2F;2011 Call Trace:</span><br><span class="line">   __dump_stack lib&#x2F;dump_stack.c:77 [inline]</span><br><span class="line">   dump_stack+0x172&#x2F;0x1f0 lib&#x2F;dump_stack.c:113</span><br><span class="line">   print_address_description.cold+0x7c&#x2F;0x20d mm&#x2F;kasan&#x2F;report.c:188</span><br><span class="line">   __kasan_report.cold+0x1b&#x2F;0x40 mm&#x2F;kasan&#x2F;report.c:317</span><br><span class="line">   kasan_report+0x12&#x2F;0x20 mm&#x2F;kasan&#x2F;common.c:614</span><br><span class="line">   __asan_report_load2_noabort+0x14&#x2F;0x20 mm&#x2F;kasan&#x2F;generic_report.c:130</span><br><span class="line">   rt_cache_valid+0x158&#x2F;0x190 net&#x2F;ipv4&#x2F;route.c:1556</span><br><span class="line">   __mkroute_output net&#x2F;ipv4&#x2F;route.c:2332 [inline]</span><br><span class="line">   ip_route_output_key_hash_rcu+0x819&#x2F;0x2d50 net&#x2F;ipv4&#x2F;route.c:2564</span><br><span class="line">   ip_route_output_key_hash+0x1ef&#x2F;0x360 net&#x2F;ipv4&#x2F;route.c:2393</span><br><span class="line">   __ip_route_output_key include&#x2F;net&#x2F;route.h:125 [inline]</span><br><span class="line">   ip_route_output_flow+0x28&#x2F;0xc0 net&#x2F;ipv4&#x2F;route.c:2651</span><br><span class="line">   ip_route_output_key include&#x2F;net&#x2F;route.h:135 [inline]</span><br><span class="line">   sctp_v4_get_dst+0x467&#x2F;0x1260 net&#x2F;sctp&#x2F;protocol.c:435</span><br><span class="line">   sctp_transport_route+0x12d&#x2F;0x360 net&#x2F;sctp&#x2F;transport.c:297</span><br><span class="line">   sctp_assoc_add_peer+0x53e&#x2F;0xfc0 net&#x2F;sctp&#x2F;associola.c:663</span><br><span class="line">   sctp_process_param net&#x2F;sctp&#x2F;sm_make_chunk.c:2531 [inline]</span><br><span class="line">   sctp_process_init+0x2491&#x2F;0x2b10 net&#x2F;sctp&#x2F;sm_make_chunk.c:2344</span><br><span class="line">   sctp_cmd_process_init net&#x2F;sctp&#x2F;sm_sideeffect.c:667 [inline]</span><br><span class="line">   sctp_cmd_interpreter net&#x2F;sctp&#x2F;sm_sideeffect.c:1369 [inline]</span><br><span class="line">   sctp_side_effects net&#x2F;sctp&#x2F;sm_sideeffect.c:1179 [inline]</span><br><span class="line">   sctp_do_sm+0x3a30&#x2F;0x50e0 net&#x2F;sctp&#x2F;sm_sideeffect.c:1150</span><br><span class="line">   sctp_assoc_bh_rcv+0x343&#x2F;0x660 net&#x2F;sctp&#x2F;associola.c:1059</span><br><span class="line">   sctp_inq_push+0x1e4&#x2F;0x280 net&#x2F;sctp&#x2F;inqueue.c:80</span><br><span class="line">   sctp_backlog_rcv+0x196&#x2F;0xbe0 net&#x2F;sctp&#x2F;input.c:339</span><br><span class="line">   sk_backlog_rcv include&#x2F;net&#x2F;sock.h:945 [inline]</span><br><span class="line">   __release_sock+0x129&#x2F;0x390 net&#x2F;core&#x2F;sock.c:2412</span><br><span class="line">   release_sock+0x59&#x2F;0x1c0 net&#x2F;core&#x2F;sock.c:2928</span><br><span class="line">   sctp_wait_for_connect+0x316&#x2F;0x540 net&#x2F;sctp&#x2F;socket.c:9039</span><br><span class="line">   __sctp_connect+0xab2&#x2F;0xcd0 net&#x2F;sctp&#x2F;socket.c:1226</span><br><span class="line">   __sctp_setsockopt_connectx+0x133&#x2F;0x1a0 net&#x2F;sctp&#x2F;socket.c:1334</span><br><span class="line">   sctp_setsockopt_connectx_old net&#x2F;sctp&#x2F;socket.c:1350 [inline]</span><br><span class="line">   sctp_setsockopt net&#x2F;sctp&#x2F;socket.c:4644 [inline]</span><br><span class="line">   sctp_setsockopt+0x22c0&#x2F;0x6d10 net&#x2F;sctp&#x2F;socket.c:4608</span><br><span class="line">   compat_sock_common_setsockopt+0x106&#x2F;0x140 net&#x2F;core&#x2F;sock.c:3137</span><br><span class="line">   __compat_sys_setsockopt+0x185&#x2F;0x380 net&#x2F;compat.c:383</span><br><span class="line">   __do_compat_sys_setsockopt net&#x2F;compat.c:396 [inline]</span><br><span class="line">   __se_compat_sys_setsockopt net&#x2F;compat.c:393 [inline]</span><br><span class="line">   __ia32_compat_sys_setsockopt+0xbd&#x2F;0x150 net&#x2F;compat.c:393</span><br><span class="line">   do_syscall_32_irqs_on arch&#x2F;x86&#x2F;entry&#x2F;common.c:337 [inline]</span><br><span class="line">   do_fast_syscall_32+0x27b&#x2F;0xd7d arch&#x2F;x86&#x2F;entry&#x2F;common.c:408</span><br><span class="line">   entry_SYSENTER_compat+0x70&#x2F;0x7f arch&#x2F;x86&#x2F;entry&#x2F;entry_64_compat.S:139</span><br><span class="line"> RIP: 0023:0xf7ff5849</span><br><span class="line"> Code: 85 d2 74 02 89 0a 5b 5d c3 8b 04 24 c3 8b 14 24 c3 8b 3c 24 c3 90 90</span><br><span class="line"> 90 90 90 90 90 90 90 90 90 90 51 52 55 89 e5 0f 34 cd 80 &lt;5d&gt; 5a 59 c3 90</span><br><span class="line"> 90 90 90 eb 0d 90 90 90 90 90 90 90 90 90 90 90 90</span><br><span class="line"> RSP: 002b:00000000f5df10cc EFLAGS: 00000296 ORIG_RAX: 000000000000016e</span><br><span class="line"> RAX: ffffffffffffffda RBX: 0000000000000007 RCX: 0000000000000084</span><br><span class="line"> RDX: 000000000000006b RSI: 000000002055bfe4 RDI: 000000000000001c</span><br><span class="line"> RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000</span><br><span class="line"> R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000</span><br><span class="line"> R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000</span><br><span class="line"> Allocated by task 480:</span><br><span class="line">   save_stack+0x23&#x2F;0x90 mm&#x2F;kasan&#x2F;common.c:71</span><br><span class="line">   set_track mm&#x2F;kasan&#x2F;common.c:79 [inline]</span><br><span class="line">   __kasan_kmalloc mm&#x2F;kasan&#x2F;common.c:489 [inline]</span><br><span class="line">   __kasan_kmalloc.constprop.0+0xcf&#x2F;0xe0 mm&#x2F;kasan&#x2F;common.c:462</span><br><span class="line">   kasan_slab_alloc+0xf&#x2F;0x20 mm&#x2F;kasan&#x2F;common.c:497</span><br><span class="line">   slab_post_alloc_hook mm&#x2F;slab.h:437 [inline]</span><br><span class="line">   slab_alloc mm&#x2F;slab.c:3326 [inline]</span><br><span class="line">   kmem_cache_alloc+0x11a&#x2F;0x6f0 mm&#x2F;slab.c:3488</span><br><span class="line">   dst_alloc+0x10e&#x2F;0x200 net&#x2F;core&#x2F;dst.c:93</span><br><span class="line">   rt_dst_alloc+0x83&#x2F;0x3f0 net&#x2F;ipv4&#x2F;route.c:1624</span><br><span class="line">   __mkroute_output net&#x2F;ipv4&#x2F;route.c:2337 [inline]</span><br><span class="line">   ip_route_output_key_hash_rcu+0x8f3&#x2F;0x2d50 net&#x2F;ipv4&#x2F;route.c:2564</span><br><span class="line">   ip_route_output_key_hash+0x1ef&#x2F;0x360 net&#x2F;ipv4&#x2F;route.c:2393</span><br><span class="line">   __ip_route_output_key include&#x2F;net&#x2F;route.h:125 [inline]</span><br><span class="line">   ip_route_output_flow+0x28&#x2F;0xc0 net&#x2F;ipv4&#x2F;route.c:2651</span><br><span class="line">   ip_route_output_key include&#x2F;net&#x2F;route.h:135 [inline]</span><br><span class="line">   sctp_v4_get_dst+0x467&#x2F;0x1260 net&#x2F;sctp&#x2F;protocol.c:435</span><br><span class="line">   sctp_transport_route+0x12d&#x2F;0x360 net&#x2F;sctp&#x2F;transport.c:297</span><br><span class="line">   sctp_assoc_add_peer+0x53e&#x2F;0xfc0 net&#x2F;sctp&#x2F;associola.c:663</span><br><span class="line">   sctp_process_param net&#x2F;sctp&#x2F;sm_make_chunk.c:2531 [inline]</span><br><span class="line">   sctp_process_init+0x2491&#x2F;0x2b10 net&#x2F;sctp&#x2F;sm_make_chunk.c:2344</span><br><span class="line">   sctp_sf_do_unexpected_init net&#x2F;sctp&#x2F;sm_statefuns.c:1541 [inline]</span><br><span class="line">   sctp_sf_do_unexpected_init.isra.0+0x7cd&#x2F;0x1350 net&#x2F;sctp&#x2F;sm_statefuns.c:1441</span><br><span class="line">   sctp_sf_do_5_2_1_siminit+0x35&#x2F;0x40 net&#x2F;sctp&#x2F;sm_statefuns.c:1670</span><br><span class="line">   sctp_do_sm+0x121&#x2F;0x50e0 net&#x2F;sctp&#x2F;sm_sideeffect.c:1147</span><br><span class="line">   sctp_assoc_bh_rcv+0x343&#x2F;0x660 net&#x2F;sctp&#x2F;associola.c:1059</span><br><span class="line">   sctp_inq_push+0x1e4&#x2F;0x280 net&#x2F;sctp&#x2F;inqueue.c:80</span><br><span class="line">   sctp_backlog_rcv+0x196&#x2F;0xbe0 net&#x2F;sctp&#x2F;input.c:339</span><br><span class="line">   sk_backlog_rcv include&#x2F;net&#x2F;sock.h:945 [inline]</span><br><span class="line">   __release_sock+0x129&#x2F;0x390 net&#x2F;core&#x2F;sock.c:2412</span><br><span class="line">   release_sock+0x59&#x2F;0x1c0 net&#x2F;core&#x2F;sock.c:2928</span><br><span class="line">   sctp_wait_for_connect+0x316&#x2F;0x540 net&#x2F;sctp&#x2F;socket.c:9039</span><br><span class="line">   __sctp_connect+0xab2&#x2F;0xcd0 net&#x2F;sctp&#x2F;socket.c:1226</span><br><span class="line">   sctp_connect net&#x2F;sctp&#x2F;socket.c:4846 [inline]</span><br><span class="line">   sctp_inet_connect+0x29c&#x2F;0x340 net&#x2F;sctp&#x2F;socket.c:4862</span><br><span class="line">   __sys_connect+0x264&#x2F;0x330 net&#x2F;socket.c:1834</span><br><span class="line">   __do_sys_connect net&#x2F;socket.c:1845 [inline]</span><br><span class="line">   __se_sys_connect net&#x2F;socket.c:1842 [inline]</span><br><span class="line">   __ia32_sys_connect+0x72&#x2F;0xb0 net&#x2F;socket.c:1842</span><br><span class="line">   do_syscall_32_irqs_on arch&#x2F;x86&#x2F;entry&#x2F;common.c:337 [inline]</span><br><span class="line">   do_fast_syscall_32+0x27b&#x2F;0xd7d arch&#x2F;x86&#x2F;entry&#x2F;common.c:408</span><br><span class="line">   entry_SYSENTER_compat+0x70&#x2F;0x7f arch&#x2F;x86&#x2F;entry&#x2F;entry_64_compat.S:139</span><br><span class="line"> Freed by task 9:</span><br><span class="line">   save_stack+0x23&#x2F;0x90 mm&#x2F;kasan&#x2F;common.c:71</span><br><span class="line">   set_track mm&#x2F;kasan&#x2F;common.c:79 [inline]</span><br><span class="line">   __kasan_slab_free+0x102&#x2F;0x150 mm&#x2F;kasan&#x2F;common.c:451</span><br><span class="line">   kasan_slab_free+0xe&#x2F;0x10 mm&#x2F;kasan&#x2F;common.c:459</span><br><span class="line">   __cache_free mm&#x2F;slab.c:3432 [inline]</span><br><span class="line">   kmem_cache_free+0x86&#x2F;0x260 mm&#x2F;slab.c:3698</span><br><span class="line">   dst_destroy+0x29e&#x2F;0x3c0 net&#x2F;core&#x2F;dst.c:129</span><br><span class="line">   dst_destroy_rcu+0x16&#x2F;0x19 net&#x2F;core&#x2F;dst.c:142</span><br><span class="line">   __rcu_reclaim kernel&#x2F;rcu&#x2F;rcu.h:222 [inline]</span><br><span class="line">   rcu_do_batch kernel&#x2F;rcu&#x2F;tree.c:2092 [inline]</span><br><span class="line">   invoke_rcu_callbacks kernel&#x2F;rcu&#x2F;tree.c:2310 [inline]</span><br><span class="line">   rcu_core+0xba5&#x2F;0x1500 kernel&#x2F;rcu&#x2F;tree.c:2291</span><br><span class="line">   __do_softirq+0x25c&#x2F;0x94c kernel&#x2F;softirq.c:293</span><br><span class="line"> The buggy address belongs to the object at ffff8880654f3a00</span><br><span class="line">   which belongs to the cache ip_dst_cache of size 176 The buggy address is located 23 bytes to the right of</span><br><span class="line">   176-byte region [ffff8880654f3a00, ffff8880654f3ab0) The buggy address belongs to the page:</span><br><span class="line"> page:ffffea0001953cc0 refcount:1 mapcount:0 mapping:ffff8880a76ad600</span><br><span class="line"> index:0xffff8880654f3c00</span><br><span class="line"> flags: 0x1fffc0000000200(slab)</span><br><span class="line"> raw: 01fffc0000000200 ffffea00026be808 ffffea000181c088 ffff8880a76ad600</span><br><span class="line"> raw: ffff8880654f3c00 ffff8880654f3000 0000000100000002 0000000000000000 page dumped because: kasan: bad access detected</span><br><span class="line"> Memory state around the buggy address:</span><br><span class="line">   ffff8880654f3980: fb fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc</span><br><span class="line">   ffff8880654f3a00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">   ffff8880654f3a80: 00 00 00 00 00 00 fc fc fc fc fc fc fc fc fc fc</span><br><span class="line">                                               ^</span><br><span class="line">     ffff8880654f3b00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb</span><br><span class="line">     ffff8880654f3b80: fb fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; </span><br><span class="line"> </span><br><span class="line"> This bug is generated by a bot. It may contain errors.</span><br><span class="line"> See https:&#x2F;&#x2F;goo.gl&#x2F;tpsmEJ for more information about syzbot.</span><br><span class="line"> syzbot engineers can be reached at syzkaller@googlegroups.com.</span><br><span class="line"> syzbot will keep track of this bug report. See:</span><br><span class="line"> https:&#x2F;&#x2F;goo.gl&#x2F;tpsmEJ#status for how to communicate with syzbot.</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从上面的信息可以看出在rt_cache_valid中访问了已经释放的dst。rt_cache_valid函数在rcu读临界区内，<br>先检查下是否是rcu锁问题。rcu锁的作用是防止dst在有读者的时候被释放，而出问题代码本身位于读临界区，<br>此时dst的回收代码不会执行到。dst是正常引用计数到达0时被rcu softirq reclaim掉的。dst引用统计被put了<br>多次导致计数为0 被释放了。跟踪下sctp下dst的释放流程，sctp_transport_route先release dst再执行get_dst。<br>由于release dst不在rcu的读临界区，在dst引用计数为0导致dst被回收后，在执行get_dst流程时引用的dst早已<br>被rcu sofirq释放。最简单的修复把release dst也放到rcu读临界区，这样在release dst和get dst的时候不<br>会触发rcu softirq的reclaim动作。</p>
]]></content>
      <categories>
        <category>network</category>
        <category>kernel</category>
      </categories>
      <tags>
        <tag>sctp</tag>
      </tags>
  </entry>
  <entry>
    <title>从内核代码看openwrt的macvlan多拨</title>
    <url>/2019/05/13/%E4%BB%8E%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81%E7%9C%8Bopenwrt%E7%9A%84macvlan%E5%A4%9A%E6%8B%A8/</url>
    <content><![CDATA[<p>OpenWrt是一个嵌入式的 Linux 发行版， 拥有强大的网络组件和扩展性，<br>常常被用于工控设备、电话、小型机器人、智能家居、路由器以及VOIP设备中。</p>
<p>很多采用openwrt的软路由的人更多的是使用openwrt的多拨实现带宽叠加。<br>其实openwrt多拨是基于内核的macvlan模块。</p>
<h2 id="macvlan是什么？"><a href="#macvlan是什么？" class="headerlink" title="macvlan是什么？"></a>macvlan是什么？</h2><p>在macvlan之前，我们只能为一个物理网络接口添加多个ip地址，却不能添<br>加多个mac地址。macvlan可以在一个物理网络接口上虚拟出多个虚拟网络<br>接口，每个虚拟接口可以独立配置mac和ip地址。这样物理网络接口相当于<br>实现了一个交换机，记录了mac和虚拟接口的对应关系。</p>
<h3 id="macvlan收包处理流程"><a href="#macvlan收包处理流程" class="headerlink" title="macvlan收包处理流程"></a>macvlan收包处理流程</h3><p><img src="/2019/05/13/%E4%BB%8E%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81%E7%9C%8Bopenwrt%E7%9A%84macvlan%E5%A4%9A%E6%8B%A8/macvlan-1.png" alt="macvlan收包"></p>
<p>上图为内核的收包处理流程。内核为设置了macvlan的物理网络接口设置rx_handler函数，<br>在使用NAPI机制收到报文上送协议栈之前先执行macvlan_handle_frame。</p>
<p>macvlan_handle_frame函数根据二层头的目的mac地址判断是发给物理网络接口还是先发<br>给虚拟网络接口。设置skb-&gt;dev为macvlan设备，然后报文进入ip协议栈处理流程。</p>
<h3 id="maclavn发包流程"><a href="#maclavn发包流程" class="headerlink" title="maclavn发包流程"></a>maclavn发包流程</h3><p><img src="/2019/05/13/%E4%BB%8E%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81%E7%9C%8Bopenwrt%E7%9A%84macvlan%E5%A4%9A%E6%8B%A8/macvlan-2.png" alt="macvlan发包"></p>
<p>macvlan_queue_xmit是macvlan设备的发包函数，判断如果是桥模式则根据目的mac查找是否<br>是本机macvlan设备，如果是则直接发给本机macvlan设备执行netif_rx_internal。否则报文<br>通过底层设备发送出去。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有个macvlan，我们就可以基于虚拟网络接口进行pppoe拨号，从而获取多个wan连接，实现多拨。</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ol>
<li><a href="https://sreeninet.wordpress.com/2016/05/29/macvlan-and-ipvlan/" target="_blank" rel="noopener">macvlan and ipvlan</a></li>
<li><a href="http://hicu.be/bridge-vs-macvlan" target="_blank" rel="noopener">bridge vs macvlan</a></li>
</ol>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>macvlan</tag>
      </tags>
  </entry>
  <entry>
    <title>编译器中的符号表</title>
    <url>/2019/05/08/%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7%E8%A1%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>看完编译器领域的”龙书”，有必要对某些关键点做下总结。符号表穿插在整个编译的过程，<br>无意是最重要的组成部分。</p>
<h2 id="符号表？"><a href="#符号表？" class="headerlink" title="符号表？"></a>符号表？</h2><p>标识符的动态语义词典，贯穿编译的整个阶段，在编译的过程中不断更新。<br>类似人口大普查一样，把每个人信息都录入某个系统中，在需要时再查询。</p>
<h2 id="符号表内容"><a href="#符号表内容" class="headerlink" title="符号表内容"></a>符号表内容</h2><ol>
<li><p>名字 </p>
<blockquote>
<p>标识符，用作查询关键字</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a;</span><br><span class="line">int foo(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line"> int c &#x3D; a+b;</span><br><span class="line"> return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类型 </p>
<blockquote>
<p>该标识符的数据类型及其相关信息</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a;</span><br><span class="line">int foo(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line"> int c &#x3D; a+b;</span><br><span class="line"> return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>a，b，c是整数类型，foo是函数类型。</p>
</li>
<li><p>种类 </p>
<blockquote>
<p>该标识符在源程序的语义角色</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a;(1)</span><br><span class="line">int foo(int a,int b)(2)</span><br><span class="line">&#123;</span><br><span class="line"> int c &#x3D; a+b;(3)</span><br><span class="line"> return c;(4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(1)中a是变量<br>(2)中foo是函数，a和b是形参<br>(3)中c是变量</p>
</li>
<li><p>地址</p>
<blockquote>
<p>与值单元相关的一些信息</p>
</blockquote>
</li>
</ol>
<h2 id="符号表作用"><a href="#符号表作用" class="headerlink" title="符号表作用"></a>符号表作用</h2><ul>
<li>变量定义和重定义检查</li>
<li>类型匹配检查</li>
<li>数据越界和溢出检查</li>
<li>值单元存储分配信息</li>
<li>函数参数传递和校验</li>
</ul>
<h2 id="符号表组织和管理"><a href="#符号表组织和管理" class="headerlink" title="符号表组织和管理"></a>符号表组织和管理</h2><ul>
<li>遇到说明性标识符则插入符号表并把语义信息插入表项中，使其指向相应表项</li>
<li>遇到应用性标识符则查询符号表，使其指向相应表项</li>
</ul>
<h2 id="符号表查询和访问方式"><a href="#符号表查询和访问方式" class="headerlink" title="符号表查询和访问方式"></a>符号表查询和访问方式</h2><ul>
<li>线性表  </li>
<li>顺序表 </li>
<li>索引表 </li>
<li>散列表</li>
</ul>
<h2 id="符号表的管理和维护"><a href="#符号表的管理和维护" class="headerlink" title="符号表的管理和维护"></a>符号表的管理和维护</h2><p>一个源文件有若干函数组成，通常每个函数对应一个符号表，此外还有一个公共符号表。</p>
<p>符号表如何管理取决于所属语言的程序结构，常见的实现方式是在内存设定一定长度的<br>符号表区，并建立适当的索引机制，访问相应的符号表。</p>
<p>如下图所示：<br><img src="/2019/05/08/%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7%E8%A1%A8%E4%BB%8B%E7%BB%8D/sym-1.png" alt=" symbol table "></p>
<h2 id="符号表的结构设计"><a href="#符号表的结构设计" class="headerlink" title="符号表的结构设计"></a>符号表的结构设计</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int foo(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">	int x,y;</span><br><span class="line">	const pi&#x3D;3.14;</span><br><span class="line">	x &#x3D; a*a;  y &#x3D; b*b;</span><br><span class="line">	retrun pixy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要填入符号表的标识符：</p>
<table>
<thead>
<tr>
<th>标识符</th>
<th align="left">语义属性</th>
</tr>
</thead>
<tbody><tr>
<td>foo</td>
<td align="left">函数，附加信息：类型，参数情况和入口地址</td>
</tr>
<tr>
<td>a</td>
<td align="left">形参</td>
</tr>
<tr>
<td>b</td>
<td align="left">形参</td>
</tr>
<tr>
<td>x</td>
<td align="left">变量</td>
</tr>
<tr>
<td>y</td>
<td align="left">变量</td>
</tr>
<tr>
<td>pi</td>
<td align="left">常量</td>
</tr>
</tbody></table>
<p>由于标识符种类不同，导致语义属性不尽相同</p>
<h2 id="如何组织符号表？"><a href="#如何组织符号表？" class="headerlink" title="如何组织符号表？"></a>如何组织符号表？</h2><p>下面是“龙书”中提到的一种符号表的体系结构：<br><img src="/2019/05/08/%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7%E8%A1%A8%E4%BB%8B%E7%BB%8D/sym-2.png" alt=" symbol table "></p>
<p>说明：</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>NAME</td>
<td>标识符源码，内部码</td>
</tr>
<tr>
<td>TYPE</td>
<td>指针，指向类型表的表项</td>
</tr>
<tr>
<td>CAT</td>
<td>种类编码：函数f，变量v，类型t，常量c，传值形参vf，传地址形参vn</td>
</tr>
<tr>
<td>ADDR</td>
<td>指针，根据标识符种类不同，指向函数表，常量表等</td>
</tr>
</tbody></table>
<ul>
<li>类型表</li>
</ul>
<table>
<thead>
<tr>
<th>名字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>TVAL</td>
<td>类型编码：整型，浮点型，字符型，布尔型，数组型，结构型</td>
</tr>
<tr>
<td>TPOINT</td>
<td>指针，根据类型编码的不同，指向不同的信息表项 基本类型：空 数组类型：指向数组表项 结构类型：指向结构表项</td>
</tr>
</tbody></table>
<ul>
<li>数组表</li>
</ul>
<table>
<thead>
<tr>
<th>名字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>LOW</td>
<td>数组下届</td>
</tr>
<tr>
<td>UP</td>
<td>数组上届</td>
</tr>
<tr>
<td>CTP</td>
<td>成员类型指针，指向类型表中表项</td>
</tr>
<tr>
<td>CTLEN</td>
<td>成员类型长度，成员类型所占值单元长度</td>
</tr>
</tbody></table>
<ul>
<li>函数表</li>
</ul>
<table>
<thead>
<tr>
<th>名字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>OFF</td>
<td>函数的值单元地址</td>
</tr>
<tr>
<td>DAT</td>
<td>指针，指向函数的数据区</td>
</tr>
<tr>
<td>FN</td>
<td>参数个数</td>
</tr>
<tr>
<td>PAR</td>
<td>指针，指向形参表</td>
</tr>
<tr>
<td>ENT</td>
<td>函数运行首地址，运行时填写</td>
</tr>
</tbody></table>
<ul>
<li><p>其它表</p>
<ul>
<li>常量表存放常量的初值</li>
<li>长度表存放数据类型所占值单元的长度</li>
</ul>
</li>
<li><p>活动记录表<br>一个函数虚拟的值单元存储分配表，在函数运行调用时用到故称活动记录。</p>
</li>
</ul>
<h2 id="符号表例子"><a href="#符号表例子" class="headerlink" title="符号表例子"></a>符号表例子</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int foo(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">	int x,y;</span><br><span class="line">	const pi&#x3D;3.14;</span><br><span class="line">	x &#x3D; a*a;  y &#x3D; b*b;</span><br><span class="line">	retrun pixy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该函数经过语法分析后，填充如下的信息:</p>
<p><img src="/2019/05/08/%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7%E8%A1%A8%E4%BB%8B%E7%BB%8D/sym-3.png" alt=" symbol table "></p>
]]></content>
      <categories>
        <category>compiler</category>
      </categories>
      <tags>
        <tag>compiler</tag>
      </tags>
  </entry>
  <entry>
    <title>BIOS和UEFI</title>
    <url>/2019/05/01/BIOS%E5%92%8CUEFI/</url>
    <content><![CDATA[<p>最近在某发行版遇到问题，大体情况是修改/etc/default/grub的定制脚本，<br>在BIOS和UEFI主板的机器上结果不同，后调查发现在UEFI机器上，grub的配置文件<br>位于Efi System Paition分区，而不是BIOS机器上的/boot/grub2下。</p>
<p>这里分析下BIOS和UEFI启动。</p>
<h2 id="bios"><a href="#bios" class="headerlink" title="bios"></a>bios</h2><p><img src="/2019/05/01/BIOS%E5%92%8CUEFI/bios.png" alt=" bios "></p>
<ol>
<li><p>上电，bios firmware开始执行，加载MBR（第一扇区）到指定位置(0x7c00)开始执行第一阶段启动代码(bootcode)</p>
<blockquote>
<p>第一阶段启动代码非常小，不超过1个扇区大小（扇区:512字节）</p>
</blockquote>
</li>
<li><p>stage 1代码负责加载并执行stage 2的代码</p>
<blockquote>
<p>stage 2代码(grub)功能强大，加载操作系统</p>
</blockquote>
</li>
<li><p>stage 2加载操作系统，操作系统启动</p>
</li>
</ol>
<h2 id="uefi"><a href="#uefi" class="headerlink" title="uefi"></a>uefi</h2><p><img src="/2019/05/01/BIOS%E5%92%8CUEFI/uefi.png" alt=" uefi "></p>
<ol>
<li><p>上电，uefi firmware开始执行，加载ESP分区的efi文件执行(解释执行efi byte code)</p>
<blockquote>
<p>efi文件中是efi字节码，uefi固件内置efi解释器，用于执行这些代码</p>
</blockquote>
</li>
<li><p>efi bootcode加载引导程序(grub)并执行引导程序</p>
<blockquote>
<p>stage 2代码(grub)功能强大，加载操作系统</p>
</blockquote>
</li>
<li><p>stage 2加载操作系统，操作系统启动</p>
</li>
</ol>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>在系统启动上，除了1和2差别很大，后边系统启动完全一样了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.partitionwizard.com/partitionmagic/uefi-vs-bios.html" target="_blank" rel="noopener">uefi vs bios</a></li>
<li><a href="https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface" target="_blank" rel="noopener">Unified_Extensible_Firmware_Interface</a></li>
</ol>
]]></content>
      <categories>
        <category>pc</category>
      </categories>
      <tags>
        <tag>bios</tag>
        <tag>uefi</tag>
      </tags>
  </entry>
  <entry>
    <title>编写python扩展模块</title>
    <url>/2019/05/01/%E7%BC%96%E5%86%99python%E6%89%A9%E5%B1%95%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>一直以来更多的是使用c语言，看到python语言在云计算时代广泛运用，<br>想着如何用c编写模块供python调用。python的官方实现就是c语言实现的，<br>即cpython。python提供了运行时接口供我们编写c扩展模块。</p>
<p>linux发行版通常把头文件和库文件打包成xxxx-dev的包形式。我们需要<br>安装python-dev来编写python扩展。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;python.h&gt; &#x2F;* Python API to python runtime system *&#x2F;</span><br><span class="line">static PyObject *SpamError;</span><br><span class="line">&#x2F;*</span><br><span class="line">spam.system(string)</span><br><span class="line">*&#x2F;</span><br><span class="line">static PyObject * spam_system(PyObject *self, PyObject *args)</span><br><span class="line">&#123;</span><br><span class="line">        const char *command;</span><br><span class="line">        int sts;</span><br><span class="line">        if (!PyArg_ParseTuple(args,&quot;s&quot;,&amp;command))</span><br><span class="line">                return NULL;</span><br><span class="line">        &#x2F;*</span><br><span class="line">         run the command in another process until it runs done     </span><br><span class="line">        *&#x2F;</span><br><span class="line">        sts &#x3D; system(command);     </span><br><span class="line">        if (sts &lt; 0) &#123;                                         </span><br><span class="line">		PyErr_SetString(SpamError,&quot;System command failed&quot;);     </span><br><span class="line">        &#125;                </span><br><span class="line">        return PyLong_FromLong(sts);</span><br><span class="line">&#125;</span><br><span class="line">static PyMethodDef SpamMethods[] &#x3D; &#123;</span><br><span class="line">        &#123;&quot;system&quot;,spam_system,METH_VARARGS,&quot;Execute a shell command.&quot;&#125;,</span><br><span class="line">        &#123;NULL,NULL,0,NULL&#125;</span><br><span class="line">&#125;;</span><br><span class="line">PyMODINIT_FUNC</span><br><span class="line">initspam(void)</span><br><span class="line">&#123;</span><br><span class="line">        PyObject *m;</span><br><span class="line">        m &#x3D; Py_InitModule(&quot;spam&quot;,SpamMethods);</span><br><span class="line">        if (!m)</span><br><span class="line">                return ;</span><br><span class="line">        SpamError &#x3D; PyErr_NewException(&quot;spam.error&quot;,NULL,NULL);</span><br><span class="line">        Py_INCREF(SpamError);</span><br><span class="line">        PyModule_AddObject(m,&quot;error&quot;,SpamError);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果模块名为xxx则必须提供xxxinit的函数。在python解释器加载模块的时候会寻找<br>模块动态库文件中导出的xxxinit函数。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>分析下mutter窗口管理器的一个问题</title>
    <url>/2019/03/01/%E5%88%86%E6%9E%90%E4%B8%8Bmutter%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="mutter-problem"><a href="#mutter-problem" class="headerlink" title="mutter problem"></a>mutter problem</h2><p>gnome hangup after 49.7 days.</p>
<h2 id="mutter"><a href="#mutter" class="headerlink" title="mutter?"></a>mutter?</h2><p>mutter是GNOME3的窗口管理器，用来取代Metacity。</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/Mutter" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Mutter</a></p>
</blockquote>
<h2 id="patch-info"><a href="#patch-info" class="headerlink" title="patch info?"></a>patch info?</h2><p>[backends/x11: Fix time-comparison bug causing hang]<a href="https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/12/diffs?commit_id=102abeedf4d3a804bed2e1930a93a52e4475a3bb" target="_blank" rel="noopener">https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/12/diffs?commit_id=102abeedf4d3a804bed2e1930a93a52e4475a3bb</a></p>
<blockquote>
<p>A comparison in translate_device_event() does not account for the fact<br>that X’s clock wraps about every 49.7 days.  When triggered, this causes<br>an unresponsive GUI.<br>Replace simple less-than comparison with XSERVER_TIME_IS_BEFORE macro,<br>which accounts for the wrapping of X’s clock.</p>
</blockquote>
<p>详细的提交记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">commit 942883577ea700f0f419c335185891ff9a02e07b</span><br><span class="line">Author: Jonas Ådahl &lt;jadahl@gmail.com&gt;</span><br><span class="line">Date:   Fri Oct 25 10:06:55 2019 +0200</span><br><span class="line"></span><br><span class="line">    x11: Limit touch replay pointer events to when replaying</span><br><span class="line"></span><br><span class="line">    When a touch sequence was rejected, the emulated pointer events would be</span><br><span class="line">    replayed with old timestamps. This caused issues with grabs as they</span><br><span class="line">    would be ignored due to being too old. This was mitigated by making sure</span><br><span class="line">    device event timestamps never travelled back in time by tampering with</span><br><span class="line">    any event that had a timestamp seemingly in the past.</span><br><span class="line"></span><br><span class="line">    This failed when the most recent timestamp that had been received were</span><br><span class="line">    much older than the timestamp of the new event. This could for example</span><br><span class="line">    happen when a session was left not interacted with for 40+ days or so;</span><br><span class="line">    when interacted with again, as any new timestamp would according to</span><br><span class="line">    XSERVER_TIME_IS_BEFORE() still be in the past compared to the &quot;most</span><br><span class="line">    recent&quot; one. The effect is that we&#39;d always use the &#96;latest_evtime&#96; for</span><br><span class="line">    all new device events without ever updating it.</span><br><span class="line"></span><br><span class="line">    The end result of this was that passive grabs would become active when</span><br><span class="line">    interacted with, but would then newer be released, as the timestamps to</span><br><span class="line">    XIAllowEvents() would out of date, resulting in the desktop effectively</span><br><span class="line">    freezing, as the Shell would have an active pointer grab.</span><br><span class="line"></span><br><span class="line">    To avoid the situation where we get stuck with an old &#96;latest_evtime&#96;</span><br><span class="line">    timestamp, limit the tampering with device event timestamp to 1) only</span><br><span class="line">    pointer events, and 2) only during the replay sequence. The second part</span><br><span class="line">    is implemented by sending an asynchronous message via the X server after</span><br><span class="line">    rejecting a touch sequence, only potentially tampering with the device</span><br><span class="line">    event timestamps until the reply. This should avoid the stuck timestamp</span><br><span class="line">    as in those situations, we&#39;ll always have a relatively up to date</span><br><span class="line">    &#96;latest_evtime&#96; meaning XSERVER_TIME_IS_BEFORE() will not get confused.</span><br><span class="line"></span><br><span class="line">    https:&#x2F;&#x2F;gitlab.gnome.org&#x2F;GNOME&#x2F;mutter&#x2F;merge_requests&#x2F;886</span><br></pre></td></tr></table></figure>
<p>指针焦点被某个程序grab后，由于时间戳不对一直得不到释放。指针事件无法正确传递导致<br>桌面无响应。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void</span><br><span class="line">translate_device_event (MetaBackendX11 *x11,</span><br><span class="line">                        XIDeviceEvent  *device_event)</span><br><span class="line">&#123;</span><br><span class="line">  MetaBackendX11Private *priv &#x3D; meta_backend_x11_get_instance_private (x11);</span><br><span class="line"></span><br><span class="line">  meta_backend_x11_translate_device_event (x11, device_event);</span><br><span class="line"></span><br><span class="line">  if (!device_event-&gt;send_event &amp;&amp; device_event-&gt;time !&#x3D; CurrentTime)</span><br><span class="line">    &#123;</span><br><span class="line">-     if (device_event-&gt;time &lt; priv-&gt;latest_evtime)</span><br><span class="line">+     if (XSERVER_TIME_IS_BEFORE (device_event-&gt;time, priv-&gt;latest_evtime))</span><br><span class="line">        &#123;</span><br><span class="line">          &#x2F;* Emulated pointer events received after XIRejectTouch is received</span><br><span class="line">           * on a passive touch grab will contain older timestamps, update those</span><br><span class="line">           * so we dont get InvalidTime at grabs.</span><br><span class="line">           *&#x2F;</span><br><span class="line">          device_event-&gt;time &#x3D; priv-&gt;latest_evtime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#x2F;* Update the internal latest evtime, for any possible later use *&#x2F;</span><br><span class="line">      priv-&gt;latest_evtime &#x3D; device_event-&gt;time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>time是32位无符号整数，单位是ms，大约49.7天会溢出。在溢出后，导致事件的时间戳<br>被设置位很久之前的值，在提交给xserver时无效。</p>
<h2 id="XSERVER-TIME-IS-BEFORE"><a href="#XSERVER-TIME-IS-BEFORE" class="headerlink" title="XSERVER_TIME_IS_BEFORE"></a>XSERVER_TIME_IS_BEFORE</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* Xserver time can wraparound, thus comparing two timestamps needs to take</span><br><span class="line"> * this into account.  Here&#39;s a little macro to help out.  If no wraparound</span><br><span class="line"> * has occurred, this is equivalent to</span><br><span class="line"> *   time1 &lt; time2</span><br><span class="line"> * Of course, the rest of the ugliness of this macro comes from accounting</span><br><span class="line"> * for the fact that wraparound can occur and the fact that a timestamp of</span><br><span class="line"> * 0 must be special-cased since it means older than anything else.</span><br><span class="line"> *</span><br><span class="line"> * Note that this is NOT an equivalent for time1 &lt;&#x3D; time2; if that&#39;s what</span><br><span class="line"> * you need then you&#39;ll need to swap the order of the arguments and negate</span><br><span class="line"> * the result.</span><br><span class="line"> *&#x2F;</span><br><span class="line">#define XSERVER_TIME_IS_BEFORE_ASSUMING_REAL_TIMESTAMPS(time1, time2) \</span><br><span class="line">	( (( (time1) &lt; (time2) ) &amp;&amp; ( (time2) - (time1) &lt; ((guint32)-1)&#x2F;2 )) || \</span><br><span class="line">		(( (time1) &gt; (time2) ) &amp;&amp; ( (time1) - (time2) &gt; ((guint32)-1)&#x2F;2 )) \</span><br><span class="line">	)</span><br><span class="line">#define XSERVER_TIME_IS_BEFORE(time1, time2) \</span><br><span class="line">	( (time1) &#x3D;&#x3D; 0 || \</span><br><span class="line">		(XSERVER_TIME_IS_BEFORE_ASSUMING_REAL_TIMESTAMPS(time1, time2) &amp;&amp; \</span><br><span class="line">		(time2) !&#x3D; 0) \</span><br><span class="line">	)</span><br></pre></td></tr></table></figure>
<p>根据patch的修改，如果时间戳不对，则窗口不响应。</p>
<p>X服务器对时间戳的使用例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time &#x3D; ClientTimeToServerTime(ctime);</span><br><span class="line">if ((CompareTimeStamps(time, currentTime) &#x3D;&#x3D; LATER) ||</span><br><span class="line">             (CompareTimeStamps(time, grabInfo-&gt;grabTime) &#x3D;&#x3D; EARLIER)</span><br><span class="line">	xxx</span><br></pre></td></tr></table></figure>
<p>这里先调用ClientTimeToServerTime把32位无符号转换为<br>TimeStamp类型，然后和currentTime进行比较。</p>
<h2 id="mutter程序"><a href="#mutter程序" class="headerlink" title="mutter程序"></a>mutter程序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main</span><br><span class="line"> \--meta_init</span><br><span class="line">      \--- meta_clutter_init</span><br><span class="line">	             \-- source &#x3D; g_source_new (&amp;event_funcs, sizeof (GSource));</span><br><span class="line">				 \-- meta_backend_post_init</span><br><span class="line">				         \-- META_BACKEND_GET_CLASS (backend)-&gt;post_init (backend);</span><br><span class="line">						       \-- x_event_source_new</span><br><span class="line">							          \--  source &#x3D; g_source_new (&amp;x_event_funcs, sizeof (XEventSource));</span><br><span class="line">      \--- meta_main_loop &#x3D; g_main_loop_new (NULL, FALSE);</span><br><span class="line"> \--meta_run </span><br><span class="line">      \--- g_main_loop_run (meta_main_loop);</span><br></pre></td></tr></table></figure>
<p>mutter是基于glib的程序，通过事件源机制注册事件处理函数。</p>
<p>meta_backend_post_init中创建的事件源处理函数会调用XPending把窗口事件取出来，然后dispatch。<br>mutter作为窗口管理器会”收到”很多窗口的事件(实际也是通过xserver发过来，见<a href="https://jichu4n.com/posts/how-x-window-managers-work-and-how-to-write-one-part-i/" target="_blank" rel="noopener">substructure redirection</a>)，主要是窗口事件，这样mutter负责把窗口消息再发给<br>X服务器。</p>
<h2 id="CurrentTime"><a href="#CurrentTime" class="headerlink" title="CurrentTime"></a>CurrentTime</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;include&#x2F;X11&#x2F;X.h:139:</span><br><span class="line">#define CurrentTime          0L        &#x2F;* special Time *&#x2F;</span><br></pre></td></tr></table></figure>
<p>xserver如果使用client传递过来的timestamp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;dix&#x2F;dixutils.c</span><br><span class="line">&#x2F;*</span><br><span class="line"> * convert client times to server TimeStamps</span><br><span class="line"> *&#x2F;</span><br><span class="line">#define HALFMONTH ((unsigned long) 1&lt;&lt;31)</span><br><span class="line">TimeStamp</span><br><span class="line">ClientTimeToServerTime(CARD32 c)</span><br><span class="line">&#123;</span><br><span class="line">    TimeStamp ts;</span><br><span class="line"></span><br><span class="line">    if (c &#x3D;&#x3D; CurrentTime)</span><br><span class="line">        return currentTime;</span><br><span class="line">    ts.months &#x3D; currentTime.months;</span><br><span class="line">    ts.milliseconds &#x3D; c;</span><br><span class="line">    if (c &gt; currentTime.milliseconds) &#123;</span><br><span class="line">        if (((unsigned long) c - currentTime.milliseconds) &gt; HALFMONTH)</span><br><span class="line">            ts.months -&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (c &lt; currentTime.milliseconds) &#123;</span><br><span class="line">        if (((unsigned long) currentTime.milliseconds - c) &gt; HALFMONTH)</span><br><span class="line">            ts.months +&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return ts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="xserver如何更新currentTime"><a href="#xserver如何更新currentTime" class="headerlink" title="xserver如何更新currentTime"></a>xserver如何更新currentTime</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;dix&#x2F;dispatch.c</span><br><span class="line">void</span><br><span class="line">UpdateCurrentTime(void)</span><br><span class="line">&#123;</span><br><span class="line">    TimeStamp systime;</span><br><span class="line"></span><br><span class="line">    &#x2F;* To avoid time running backwards, we must call GetTimeInMillis before</span><br><span class="line">     * calling ProcessInputEvents.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    systime.months &#x3D; currentTime.months;</span><br><span class="line">    systime.milliseconds &#x3D; GetTimeInMillis();</span><br><span class="line">    if (systime.milliseconds &lt; currentTime.milliseconds)</span><br><span class="line">        systime.months++;</span><br><span class="line">    if (InputCheckPending())</span><br><span class="line">        ProcessInputEvents();</span><br><span class="line">    if (CompareTimeStamps(systime, currentTime) &#x3D;&#x3D; LATER)</span><br><span class="line">        currentTime &#x3D; systime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><ol>
<li><a href="https://magcius.github.io/xplain/article/x-basics.html" target="_blank" rel="noopener">x basics</a></li>
<li><a href="https://www.x.org/wiki/guide/concepts/" target="_blank" rel="noopener">x concepts</a></li>
<li><a href="https://www.x.org/docs/XProtocol/proto.pdf" target="_blank" rel="noopener">X Window System Protocol</a></li>
<li><a href="https://jichu4n.com/posts/how-x-window-managers-work-and-how-to-write-one-part-i/" target="_blank" rel="noopener">How X Window Managers Work, And How To Write One</a></li>
</ol>
]]></content>
      <categories>
        <category>mutter</category>
      </categories>
      <tags>
        <tag>mutter</tag>
        <tag>x11</tag>
      </tags>
  </entry>
  <entry>
    <title>linux发行版DVD安装机制分析</title>
    <url>/2017/04/12/linux%E5%8F%91%E8%A1%8C%E7%89%88DVD%E5%AE%89%E8%A3%85%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="linux发行版DVD安装机制分析"><a href="#linux发行版DVD安装机制分析" class="headerlink" title="linux发行版DVD安装机制分析"></a>linux发行版DVD安装机制分析</h2><p>想知道linux发行版究竟是怎么启动安装的吗，下面简单的分析下dvd光盘启动linux机制。</p>
<h2 id="ISO-9660-标准"><a href="#ISO-9660-标准" class="headerlink" title="ISO 9660 标准"></a>ISO 9660 标准</h2><p>如果系统支持DVD启动，CD/DVD镜像格式必须满足标准，目前主要是采用<a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-119.pdf" target="_blank" rel="noopener">ISO 9660标准</a>。</p>
<p>ISO 9660是CD-ROM的标准文件系统。它还广泛用于DVD和BD介质上，也可能存在于USB sticks或硬盘上。</p>
<p>ISO 9660基本信息：</p>
<ol>
<li>扇区大小<br>ISO 9660扇区正常都是2KB，尽管规范说可选，但是很难找到不是2K扇区大小的DVD</li>
<li>数字编码<br>支持大段和小端模式   </li>
<li>字符串编码<br>采用ASCII编码，但并不是所有字符都可用。但并不是所有DVD遵循这个规范。</li>
<li>大小限制<br>最大2^32的block，即8TB。</li>
<li>系统区域<br>前32KB(16个扇区)可以存储任意数据。如果ISO 9660文件系统存放在usb sticks或者硬盘，则一般用于存放boot代码(MBR)。</li>
</ol>
<h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><p>BIOS/EFI固件支持CD/DVD启动，根据ISO 9660标准寻找光盘上的boot record记录，根据boot record进而找到boot image(isolinux.bin)，<br>执行bootimage代码，根据isolinux.cfg的配置加载内核(vmlinuz)和RAM DISK(initrd)，加载完后跳转到<br>内核执行。</p>
<p>这个initrd在内核启动时作为内存根文件系统使用，加载必要的驱动，然后内核切换到真正的根文件系统上面。<br>对于RHEL系就是光盘LiveOS下的squashfs.img。内核会挂载squashfs镜像，然后切换到其中的根文件系统。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@vm]# file squashfs.img</span><br><span class="line">squashfs.img: Squashfs filesystem, little endian, version 4.0, 433674553 bytes, 3 inodes, blocksize: 131072 bytes, created: Wed Mar 18 13:21:34 2020</span><br></pre></td></tr></table></figure>
<p>挂载该squashfs镜像后可得到里边是一个rootfs.img(ext4文件系统镜像)。<br>这个rootfs.img就是内核在安装发行版时使用的根文件系统。</p>
<h3 id="vmlinuz的生成"><a href="#vmlinuz的生成" class="headerlink" title="vmlinuz的生成"></a>vmlinuz的生成</h3><p>vmlinuz是内核文件，如果是自己编译内核，可以到<a href="https://www.kernel.org/" target="_blank" rel="noopener">官网</a>下载对应版本的<br>源码，编译。对于RHEL系发行版，一般有对应版本的源码包，如RPM源码包，安装后可以使用<br><a href="https://fedoraproject.org/wiki/Building_a_custom_kernel/Source_RPM" target="_blank" rel="noopener">rpmbuild编译内核</a>。<br>对于debian系发行版，可以参考<a href="https://blog.lpxin.com/2019/05/15/%E4%BD%BF%E7%94%A8make-kpkg%E7%BC%96%E8%AF%91deb%E5%86%85%E6%A0%B8%E5%AE%89%E8%A3%85%E5%8C%85/" target="_blank" rel="noopener">这里</a>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@vm]# file vmlinuz</span><br><span class="line">vmlinuz: Linux kernel x86 boot executable bzImage, version 3.10.0-514.el7.x86_64 (root@RX300S8-1) #1 SMP Wed Mar 18 15:05:, RO-rootFS, swap_dev 0x5, Normal VGA</span><br></pre></td></tr></table></figure>

<h3 id="initrd的解压和打包"><a href="#initrd的解压和打包" class="headerlink" title="initrd的解压和打包"></a>initrd的解压和打包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@vm]# file initrd.img</span><br><span class="line">initrd.img: LZMA compressed data, streamed</span><br></pre></td></tr></table></figure>

<p>一般initrd都是经过压缩的，如上是采用lzma压缩的。需要lzma解压，完成后得到cpio包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cpio -idmv &lt;initrd.img</span><br></pre></td></tr></table></figure>

<p>经过cpio命令可以解压得到里边的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@vm]# ls</span><br><span class="line">bin  etc   lib    proc  run   shutdown  sysroot  usr</span><br><span class="line">dev  init  lib64  root  sbin  sys       tmp      var</span><br></pre></td></tr></table></figure>
<p>这时可以对里边的内容修改，如替换成自己的内核驱动等等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . | cpio -c -o ..&#x2F;initrd.img</span><br></pre></td></tr></table></figure>
<p>上面用于打包cpio，然后经过lzma压缩就可以得到可用的initrd。</p>
<p>这里注意如果使用自己的lib/modules/xxxx替换，需要depmod一下，生成<br>对应的modules.alias等文件，这样系统才能正常工作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">depmod -a -b &lt;lib&#x2F;modules&#x2F;xxxx中lib的父目录&gt;  -F &lt;Your System.map文件&gt;  -E &lt;Your symvers文件&gt; &lt;lib&#x2F;modules&#x2F;xxxx中的xxxx字符串即内核版本号&gt;</span><br></pre></td></tr></table></figure>
<p>经过上述步骤后打包成的initrd是可以正常工作的。</p>
<h3 id="squashfs镜像的解压和打包"><a href="#squashfs镜像的解压和打包" class="headerlink" title="squashfs镜像的解压和打包"></a>squashfs镜像的解压和打包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir tmp_squashfs</span><br><span class="line">mount squashfs.img tmp_squashfs</span><br><span class="line">[root@vm tmp_squashfs]# tree</span><br><span class="line">.</span><br><span class="line">└── LiveOS</span><br><span class="line">    └── rootfs.img</span><br><span class="line"></span><br><span class="line">1 directory, 1 file</span><br></pre></td></tr></table></figure>
<p>如果需要修改其中的rootfs.img需要拷贝出来，然后挂载该rootfs镜像，修改完直接卸载。<br>然后重新做成squashfs镜像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mksquashfs &lt;Your squashfs目录&gt; squashfs.img</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过上述步骤可以详细了解linux发行版启动安装机制。<br>简单讲首先运行一个linux内核(CD/DVD上面)，然后执行发行版的安装程序完成具体的安装。<br>安装程序负责对硬盘分区，挂载，使用CD/DVD上的目录作为安装源安装软件，最好配置重启完成安装。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>CD</tag>
        <tag>DVD</tag>
        <tag>initrd</tag>
        <tag>vmlinuz</tag>
        <tag>squashfs</tag>
        <tag>ISO 9660</tag>
      </tags>
  </entry>
</search>
